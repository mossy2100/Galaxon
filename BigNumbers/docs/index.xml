<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Galaxon.Numerics.BigNumbers</name>
    </assembly>
    <members>
        <member name="T:Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>
            Encapsulates a complex number with BigDecimal parts, allowing high levels of precision.
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Equals(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.FuzzyEquals``1(``0)">
            <summary>
            See if a BigComplex is effectively equal to a real or complex number.
            </summary>
            <param name="n">The number.</param>
            <returns>If the values are equal (within a given tolerance).</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.MaxMagnitude(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.MaxMagnitudeNumber(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.MinMagnitude(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.MinMagnitudeNumber(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Equality(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Inequality(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigComplex.E">
            <inheritdoc/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigComplex.Pi">
            <inheritdoc/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigComplex.Tau">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(System.SByte)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast sbyte to BigComplex.</summary>
            <param name="x">The sbyte value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(System.Byte)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast byte to BigDecimal.</summary>
            <param name="x">The byte value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(System.Int16)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast short to BigDecimal.</summary>
            <param name="x">The short value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(System.UInt16)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast ushort to BigDecimal.</summary>
            <param name="x">The ushort value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(System.Int32)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast int to BigDecimal.</summary>
            <param name="x">The int value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(System.UInt32)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast uint to BigDecimal.</summary>
            <param name="x">The uint value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(System.Int64)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast long to BigDecimal.</summary>
            <param name="x">The long value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(System.UInt64)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast ulong to BigDecimal.</summary>
            <param name="x">The ulong value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(System.Int128)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast Int128 to BigDecimal.</summary>
            <param name="x">The Int128 value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(System.UInt128)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast UInt128 to BigDecimal.</summary>
            <param name="x">The UInt128 value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(System.Numerics.BigInteger)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast BigInteger to BigDecimal.</summary>
            <param name="x">The BigInteger value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(System.Half)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast Half to BigDecimal.</summary>
            <param name="x">The Half value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(System.Single)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast float to BigDecimal.</summary>
            <param name="x">The float value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(System.Double)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast double to BigDecimal.</summary>
            <param name="x">The double value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(System.Decimal)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast decimal to BigDecimal.</summary>
            <param name="x">The decimal value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(System.Numerics.Complex)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast Complex to BigComplex.</summary>
            <param name="x">The Complex value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Implicit(Galaxon.Numerics.BigNumbers.BigDecimal)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast BigDecimal to BigComplex.</summary>
            <param name="x">The BigDecimal value.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~Galaxon.Numerics.BigNumbers.BigComplex">
            <summary>Cast BigRational to BigComplex.</summary>
            <remarks>
            This cast has to be explicit because there can be information loss when converting the
            BigRational to BigDecimal.
            </remarks>
            <param name="x">The BigRational value.</param>
            <returns>The closest BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~System.SByte">
            <summary>Cast BigComplex to sbyte.</summary>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent sbyte value.</returns>
            <exception cref="T:System.OverflowException">
            If the real part of the BigComplex is outside the valid range of sbyte.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary part.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~System.Byte">
            <summary>Cast BigComplex to byte.</summary>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent byte value.</returns>
            <exception cref="T:System.OverflowException">
            If the real part of the BigComplex is outside the valid range of byte.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary part.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~System.Int16">
            <summary>Cast BigComplex to short.</summary>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent short value.</returns>
            <exception cref="T:System.OverflowException">
            If the real part of the BigComplex is outside the valid range of short.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary part.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~System.UInt16">
            <summary>Cast BigComplex to ushort.</summary>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent ushort value.</returns>
            <exception cref="T:System.OverflowException">
            If the real part of the BigComplex is outside the valid range of ushort.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary part.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~System.Int32">
            <summary>Cast BigComplex to int.</summary>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent int value.</returns>
            <exception cref="T:System.OverflowException">
            If the real part of the BigComplex is outside the valid range of int.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary part.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~System.UInt32">
            <summary>Cast BigComplex to uint.</summary>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent uint value.</returns>
            <exception cref="T:System.OverflowException">
            If the real part of the BigComplex is outside the valid range of uint.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary part.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~System.Int64">
            <summary>Cast BigComplex to long.</summary>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent long value.</returns>
            <exception cref="T:System.OverflowException">
            If the real part of the BigComplex is outside the valid range of long.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary part.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~System.UInt64">
            <summary>Cast BigComplex to ulong.</summary>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent ulong value.</returns>
            <exception cref="T:System.OverflowException">
            If the real part of the BigComplex is outside the valid range of ulong.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary part.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~System.Int128">
            <summary>Cast BigComplex to Int128.</summary>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent Int128 value.</returns>
            <exception cref="T:System.OverflowException">
            If the real part of the BigComplex is outside the valid range of Int128.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary part.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~System.UInt128">
            <summary>Cast BigComplex to UInt128.</summary>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent UInt128 value.</returns>
            <exception cref="T:System.OverflowException">
            If the real part of the BigComplex is outside the valid range of UInt128.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary part.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~System.Numerics.BigInteger">
            <summary>Cast BigComplex to BigInteger.</summary>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent BigInteger value.</returns>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary part.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~System.Half">
            <summary>Cast BigComplex to Half.</summary>
            <remarks>
            If the real part is outside the valid range for Half, the result will be
            Half.NegativeInfinity or Half.PositiveInfinity; no exception will be thrown.
            </remarks>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent Half value.</returns>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary part.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~System.Single">
            <summary>Cast BigComplex to float.</summary>
            <remarks>
            If the real part is outside the valid range for float, the result will be
            float.NegativeInfinity or float.PositiveInfinity; no exception will be thrown.
            </remarks>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent float value.</returns>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary part.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~System.Double">
            <summary>Cast BigComplex to double.</summary>
            <remarks>
            If the real part is outside the valid range for double, the result will be
            double.NegativeInfinity or double.PositiveInfinity; no exception will be thrown.
            </remarks>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent double value.</returns>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary part.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~System.Decimal">
            <summary>Cast BigComplex to decimal.</summary>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent decimal value.</returns>
            <exception cref="T:System.OverflowException">
            If the real part of the BigComplex is outside the valid range of decimal.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary part.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~System.Numerics.Complex">
            <summary>Cast of BigComplex to Complex.</summary>
            <remarks>
            If either the Real or Imaginary parts of the BigComplex value are outside the valid range
            for double, these will be converted to double.NegativeInfinity or double.PositiveInfinity,
            and no exception will be thrown.
            </remarks>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent Complex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast BigComplex to BigDecimal.</summary>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent BigDecimal value.</returns>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary component.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Explicit(Galaxon.Numerics.BigNumbers.BigComplex)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast BigComplex to BigRational.</summary>
            <param name="bc">The BigComplex value.</param>
            <returns>The equivalent BigRational value.</returns>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary component.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.ToTuple">
            <summary>Convert BigComplex to tuple.</summary>
            <returns>The equivalent tuple.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.FromTuple(System.ValueTuple{Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal})">
            <summary>Construct BigComplex from tuple of 2 BigDecimal values.</summary>
            <param name="complex">The tuple.</param>
            <returns>The equivalent BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.ToArray">
            <summary>Convert BigComplex to array.</summary>
            <returns>The equivalent array.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.FromArray(Galaxon.Numerics.BigNumbers.BigDecimal[])">
            <summary>Construct BigComplex from an array of 2 BigDecimal values.</summary>
            <param name="complex">The array.</param>
            <returns>The equivalent BigComplex value.</returns>
            <exception cref="T:System.ArgumentException">
            If the array does not contain exactly 2 values.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.TryConvertFromChecked``1(``0,Galaxon.Numerics.BigNumbers.BigComplex@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.TryConvertFromSaturating``1(``0,Galaxon.Numerics.BigNumbers.BigComplex@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.TryConvertFromTruncating``1(``0,Galaxon.Numerics.BigNumbers.BigComplex@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.TryConvertToChecked``1(Galaxon.Numerics.BigNumbers.BigComplex,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.TryConvertToSaturating``1(Galaxon.Numerics.BigNumbers.BigComplex,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.TryConvertToTruncating``1(Galaxon.Numerics.BigNumbers.BigComplex,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.ConvertToReal``1(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Convert a BigComplex to a real number type.</summary>
            <param name="bc">The BigComplex value.</param>
            <typeparam name="T">The real number type.</typeparam>
            <returns>The closest value of the real number type.</returns>
            <exception cref="T:System.OverflowException">
            If the real part of the BigComplex is outside the range of the other number type.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the BigComplex value has an imaginary part.
            </exception>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigComplex.Real">
            <summary>The real part of the BigComplex number.</summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigComplex.Imaginary">
            <summary>The imaginary part of the BigComplex number.</summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigComplex.Magnitude">
            <summary>The magnitude (or absolute value) of the BigComplex number.</summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigComplex.Phase">
            <summary>The phase angle of the BigComplex number.</summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigComplex.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigComplex.One">
            <inheritdoc/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigComplex.ImaginaryOne">
            <summary>Value of the imaginary unit, equal to Sqrt(-1).</summary>
            <see cref="F:System.Numerics.Complex.ImaginaryOne"/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigComplex.I">
            <summary>Convenient shorthand for ImaginaryOne.</summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigComplex.Radix">
            <inheritdoc/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigComplex.AdditiveIdentity">
            <inheritdoc/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigComplex.MultiplicativeIdentity">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.#ctor(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>
            Construct a BigComplex from 2 BigDecimal values, representing the real and imaginary parts.
            </summary>
            <param name="real">The real part.</param>
            <param name="imaginary">The imaginary part.</param>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.#ctor(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>
            Construct a BigComplex from a single BigDecimal value, taken to be the real part.
            </summary>
            <param name="real">The real part.</param>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.#ctor">
            <summary>Construct a zero BigComplex.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Pow(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Complex exponentiation.</summary>
            <remarks>Only the principal value is returned.</remarks>
            <see href="https://en.wikipedia.org/wiki/Exponentiation#Complex_exponentiation"/>
            <param name="z">The base.</param>
            <param name="w">The exponent.</param>
            <returns>The result of the exponentiation.</returns>
            <exception cref="T:System.ArithmeticException">
            If the base is 0 and the exponent is negative or imaginary.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Sqr(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Calculate the square of a BigComplex number.</summary>
            <param name="z">A BigComplex value.</param>
            <returns>The square of the BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Cube(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Calculate the cube of a BigComplex number.</summary>
            <param name="z">A BigComplex value.</param>
            <returns>The cube of the BigComplex value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Hypot(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.RootN(Galaxon.Numerics.BigNumbers.BigComplex,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Roots(Galaxon.Numerics.BigNumbers.BigComplex,System.Int32)">
            <summary>Computes the n-th roots of a complex value.</summary>
            <param name="z">The value whose <paramref name="n"/>-th roots are to be computed.</param>
            <param name="n">The degree of the roots to be computed.</param>
            <returns>The <paramref name="n"/>-th roots of <paramref name="z"/>.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Sqrt(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>
            Calculate the square root of a BigComplex number.
            The second root can be found by the conjugate of the result.
            You can use this method to get the square root of a negative value (including a BigDecimal
            value).
            e.g. BigComplex z = BigComplex.Sqrt(-5);
            <see cref="M:System.Math.Sqrt(System.Double)"/>
            <see cref="M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)"/>
            <see cref="M:Galaxon.Numerics.BigNumbers.BigDecimal.Sqrt(Galaxon.Numerics.BigNumbers.BigDecimal)"/>
            </summary>
            <param name="z">A BigComplex number.</param>
            <returns>The positive square root as a BigComplex number.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Cbrt(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Exp(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Exp2(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Exp10(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Log(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
            <remarks>Finds the principal value only.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">If z is 0.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Log(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Log(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>
            Logarithm of a complex number in a specified base.
            <see cref="M:Galaxon.Numerics.BigNumbers.BigComplex.Log(Galaxon.Numerics.BigNumbers.BigComplex)"/>
            <see cref="M:Galaxon.Numerics.BigNumbers.BigDecimal.Log(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)"/>
            </summary>
            <param name="z">The complex arg.</param>
            <param name="b">The base.</param>
            <returns>The logarithm of z in base b.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the complex value is 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the base is less than or equal to 0, or equal to 1.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Log2(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>
            Logarithm of a complex number in base 2.
            <see cref="M:Galaxon.Numerics.BigNumbers.BigDecimal.Log2(Galaxon.Numerics.BigNumbers.BigDecimal)"/>
            </summary>
            <param name="z">The complex arg.</param>
            <returns>The logarithm of z in base 2.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Log10(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>
            Logarithm of a complex number in base 10.
            <see cref="M:Galaxon.Numerics.BigNumbers.BigDecimal.Log10(Galaxon.Numerics.BigNumbers.BigDecimal)"/>
            <see href="https://en.wikipedia.org/wiki/Euler%27s_identity"/>
            <see href="https://tauday.com/tau-manifesto#sec-euler_s_identity"/>
            </summary>
            <param name="z">The complex arg.</param>
            <returns>The logarithm of z in base 10.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsCanonical(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsZero(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsNegative(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsPositive(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsInteger(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsOddInteger(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsEvenInteger(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsRealNumber(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsImaginaryNumber(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsComplexNumber(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsFinite(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsInfinity(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsNegativeInfinity(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsPositiveInfinity(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsNaN(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsNormal(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.IsSubnormal(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Abs(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>
            Calculate the absolute value of the BigComplex value (also known as magnitude).
            </summary>
            <param name="z">A BigComplex number.</param>
            <returns>The magnitude of the argument.</returns>
            <see cref="M:System.Numerics.Complex.Abs(System.Numerics.Complex)"/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.System#Numerics#INumberBase{Galaxon#Numerics#BigNumbers#BigComplex}#Abs(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>This method isn't needed for practical purposes, just for the interface.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.FromPolarCoordinates(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>
            Construct a complex number from the magnitude and phase.
            </summary>
            <param name="magnitude">The magnitude of the complex number.</param>
            <param name="phase">The phase angle in radians.</param>
            <returns>The new BigComplex number.</returns>
            <see cref="M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)"/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Clone(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Clone method.</summary>
            <param name="z">The BigComplex value to clone.</param>
            <returns>A new BigComplex with the same value as the parameter.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Negate(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Negate method.</summary>
            <param name="z">The BigComplex value to negate.</param>
            <returns>The negation of the parameter.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Conjugate(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Complex conjugate method.</summary>
            <param name="z">The BigComplex value to conjugate.</param>
            <returns>The complex conjugate of the argument.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Add(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Addition method.</summary>
            <param name="z">The left-hand operand.</param>
            <param name="w">The right-hand operand.</param>
            <returns>The addition of the arguments.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Subtract(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Subtraction method.</summary>
            <param name="z">The left-hand operand.</param>
            <param name="w">The right-hand operand.</param>
            <returns>The subtraction of the arguments.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Multiply(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Multiply two BigComplex values.</summary>
            <param name="z">The left-hand operand.</param>
            <param name="w">The right-hand operand.</param>
            <returns>The multiplication of the arguments.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Divide(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Divide one BigComplex by another.</summary>
            <param name="z">The left-hand operand.</param>
            <param name="w">The right-hand operand.</param>
            <returns>The division of the arguments.</returns>
            <exception cref="T:System.DivideByZeroException">If w == 0</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Reciprocal(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Calculate the reciprocal of a BigComplex value.</summary>
            <param name="z">A BigComplex value.</param>
            <returns>The reciprocal of the BigComplex value.</returns>
            <exception cref="T:System.DivideByZeroException">If the BigComplex value is 0.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_UnaryPlus(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_UnaryNegation(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Addition(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Subtraction(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Decrement(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Increment(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Multiply(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_Division(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.op_ExclusiveOr(Galaxon.Numerics.BigNumbers.BigComplex,Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Exponentiation operator. </summary>
            <param name="z">The base.</param>
            <param name="w">The exponent.</param>
            <returns>The first operand raised to the power of the second.</returns>
            <exception cref="T:System.ArithmeticException">
            If the base is 0 and the exponent is negative or imaginary.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <inheritdoc/>
            <remarks>Ignoring style parameter for now.</remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Parse(System.String,System.IFormatProvider)">
             <inheritdoc/>
             <remarks>
             Supported formats:
             1. Ordinary real number (integer or floating point), e.g. 12345, 123.45, 123.45e67 etc. The
                'e' for exponent can be lower or upper-case, as with normal floating point syntax.
             2. Format used by System.Complex.ToString(), with angle brackets and a semicolon. Square
                brackets, curly braces, parentheses, or no brackets at all are also supported.
             3. Standard notation used in maths is supported (e.g. a + bi), with either i or j. The i or
                j can come before or after the imaginary number, and it can be lower or upper-case.
            
             Also note:
             - Leading, trailing, or any other whitespace is ignored.
             - Digit grouping characters (e.g. thousands separators) are allowed, including commas or
               periods (culture-specific), underscores, and thin spaces.
             - The real part must come before the imaginary part. In the math notation, either the real
               or imaginary part can be omitted.
             - The format (x, y) is NOT supported, because we need to allow the commas as a decimal
               points (and they could also appear as digit grouping characters).
             - A null or empty string is taken to be 0.
             </remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Parse(System.String)">
            <summary>Simplest version of Parse().</summary>
            <param name="s">The string to parse.</param>
            <returns>The BigComplex value represented by the string.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Galaxon.Numerics.BigNumbers.BigComplex@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.TryParse(System.String,System.IFormatProvider,Galaxon.Numerics.BigNumbers.BigComplex@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.TryParse(System.String,Galaxon.Numerics.BigNumbers.BigComplex@)">
            <summary>Simplest version of TryParse().</summary>
            <param name="s">The string to parse.</param>
            <param name="result">The BigComplex value represented by the string.</param>
            <returns>If the attempt to parse the value succeeded.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,Galaxon.Numerics.BigNumbers.BigComplex@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,Galaxon.Numerics.BigNumbers.BigComplex@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.ToString(System.String,System.IFormatProvider)">
             <inheritdoc/>
             <remarks>
             I've added support for an alternate format to the one used by Complex.ToString(), namely the
             conventional "a + bi" notation (and it's variations).
             Both 'i' and 'j' are supported for the imaginary unit, hopefully to keep both mathematicians
             and engineers happy.
            
             Upper-case 'I' means the 'i' is placed after the imaginary part, e.g. 12 + 34i
             Lower-case 'i' means the 'i' is placed before the imaginary part, e.g. 12 + i34
             Upper-case 'J' means the 'j' is placed after the imaginary part, e.g. 12 + 34j
             Lower-case 'j' means the 'j' is placed before the imaginary part, e.g. 12 + j34
            
             If there's no imaginary part, the real part will be formatted like a normal real value.
             If there's no real part, the imaginary part will be formatted like a normal real value with
             the i or j placed as a prefix or suffix according to the format specifier.
             If the value is negative, the sign will come before the number with i or j.
             e.g. -1.23i, -i1.23, -1.23j, -j1.23
            
             If you want to use this format, the code ('I', 'i', 'J', or 'j') comes *before* the normal
             format code, or it can be by itself. So, these would all be valid:
             - I
             - j
             - IG
             - IF0
             - iE3
             - jN
             etc.
            
             If you don't include this prefix, then the same format used by Complex will be used, with
             angle brackets, and a semicolon separating the real and imaginary parts. Each part will be
             formatted according to the format string (e.g. G, F2, E3, etc.).
            
             The default format code is "G".
             </remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.ToString(System.String)">
            <summary>
            Format the BigComplex as a string.
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.ToString">
            <summary>
            Express the complex number as a string in the usual algebraic format.
            This differs from Complex.ToString(), which outputs strings like (x, y).
            </summary>
            <returns>The complex number as a string.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Sin(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.SinPi(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Cos(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.CosPi(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.SinCos(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.SinCosPi(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Tan(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
            <remarks>
            I'm using Formulation 4 from this page:
            <see href="https://proofwiki.org/wiki/Tangent_of_Complex_Number"/>
            I *assume* this is the fastest, as it "only" requires 4 power series calculations, but I
            haven't compared all the methods to verify as yet.
            There is probably a single power series that converges on the correct result, but I haven't
            found it as yet.
            </remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.TanPi(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Sec(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Calculate the secant of the BigComplex value.</summary>
            <param name="z">A BigComplex value.</param>
            <returns>The secant of the value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Csc(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Calculate the cosecant of the BigComplex value.</summary>
            <param name="z">A BigComplex value.</param>
            <returns>The cosecant of the value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Cot(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Calculate the cotangent of the BigComplex value.</summary>
            <param name="z">A BigComplex value.</param>
            <returns>The cotangent of the value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Asin(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
            <see href="https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Logarithmic_forms"/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.AsinPi(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Acos(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
            <see href="https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Logarithmic_forms"/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.AcosPi(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Atan(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
            <see href="https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Logarithmic_forms"/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.AtanPi(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Acot(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Calculate the inverse cotangent of a BigComplex value.</summary>
            <param name="z">The BigComplex value.</param>
            <returns>The inverse cotangent.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Asec(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Calculate the inverse secant of a BigComplex value.</summary>
            <param name="z">The BigComplex value.</param>
            <returns>The inverse secant.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Acsc(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Calculate the inverse cosecant of a BigComplex value.</summary>
            <param name="z">The BigComplex value.</param>
            <returns>The inverse cosecant.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Sinh(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Cosh(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Tanh(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Coth(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Calculate the hyperbolic cotangent of a BigComplex value.</summary>
            <param name="z">The BigComplex value.</param>
            <returns>The hyperbolic cotangent.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Sech(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Calculate the hyperbolic secant of a BigComplex value.</summary>
            <param name="z">The BigComplex value.</param>
            <returns>The hyperbolic secant.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Csch(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Calculate the hyperbolic cosecant of a BigComplex value.</summary>
            <param name="z">The BigComplex value.</param>
            <returns>The hyperbolic cosecant.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Asinh(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
            <see href="https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions#Principal_value_of_the_inverse_hyperbolic_sine"/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Acosh(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
            <see href="https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions#Principal_value_of_the_inverse_hyperbolic_cosine"/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Atanh(Galaxon.Numerics.BigNumbers.BigComplex)">
            <inheritdoc/>
            <see href="https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions#Principal_values_of_the_inverse_hyperbolic_tangent_and_cotangent"/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Acoth(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Calculate the inverse hyperbolic cotangent of a BigComplex value.</summary>
            <param name="z">The BigComplex value.</param>
            <returns>The inverse hyperbolic cotangent.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Asech(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Calculate the inverse hyperbolic secant of a BigComplex value.</summary>
            <param name="z">The BigComplex value.</param>
            <returns>The inverse hyperbolic secant.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigComplex.Acsch(Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>Calculate the inverse hyperbolic cosecant of a BigComplex value.</summary>
            <param name="z">The BigComplex value.</param>
            <returns>The inverse hyperbolic cosecant.</returns>
        </member>
        <member name="T:Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>
            Operators and methods for comparing BigDecimal.
            </summary>
            <summary>
            Contains everything relating to constants.
            </summary>
             <summary>
             Core partial struct for the BigDecimal type.
             Contains the core fields and properties, and the constructors.
             The other partials contain members grouped by purpose.
            
             A BigDecimal is represented internally by a BigInteger value representing the significand,
             and an int representing the exponent. The value of a BigDecimal can easily be calculated from:
                 value = Significand * 10^Exponent
            
             No trailing zeros are retained in the significand; rather, the exponent is adjusted instead.
             This minimised the size of the BigInteger being used to store the value. This varies from the
             scientific meaning of significant digits, which can include significant trailing zeros, but it
             seems like the right design choice here.
             </summary>
            <summary>
            Power, root, exponential, and logarithm methods for BigDecimal.
            </summary>
            <summary>Struct members relating to BigDecimal numerical methods.</summary>
            <summary>
            Trigonometric methods for BigDecimal.
            </summary>
            <see href="https://en.wikipedia.org/wiki/Taylor_series#Trigonometric_functions"/>
            <see href="https://en.wikipedia.org/wiki/Sine_and_cosine#Series_definitions"/>
        </member>
        <member name="F:Galaxon.Numerics.BigNumbers.BigDecimal._BITS_PER_BYTE">
            <summary>Number of bits per byte.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.GetSignificandByteCount">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.GetSignificandBitLength">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.GetExponentByteCount">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.GetExponentShortestBitLength">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryWriteSignificandLittleEndian(System.Span{System.Byte},System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryWriteSignificandBigEndian(System.Span{System.Byte},System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryWriteExponentLittleEndian(System.Span{System.Byte},System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryWriteExponentBigEndian(System.Span{System.Byte},System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryWriteBytes(System.Span{System.Byte},System.Span{System.Byte},System.Int32@)">
            <summary>Copy some bytes from one span to another.</summary>
            <param name="bytes">The bytes to copy.</param>
            <param name="destination">The span to copy the bytes to.</param>
            <param name="bytesWritten">How many bytes were written.</param>
            <returns>If the operation succeeded.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryWriteBigInteger(System.Numerics.BigInteger,System.Span{System.Byte},System.Int32@,System.Boolean)">
            <summary>Write a BigInteger to a destination span of bytes.</summary>
            <param name="bi">The BigInteger to write.</param>
            <param name="destination">The span of bytes to copy the BigInteger bytes to.</param>
            <param name="bytesWritten">The number of bytes written.</param>
            <param name="isBigEndian">If the bytes should be copied in big-endian format or not.</param>
            <returns>If the operation succeeded.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryWriteInt(System.Int32,System.Span{System.Byte},System.Int32@,System.Boolean)">
            <summary>Write an int to a destination span of bytes.</summary>
            <param name="i">The int to write.</param>
            <param name="destination">The span of bytes to copy the int bytes to.</param>
            <param name="bytesWritten">The number of bytes written.</param>
            <param name="isBigEndian">If the bytes should be copied in big-endian format or not.</param>
            <returns>If the operation succeeded.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Equals(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.FuzzyEquals``1(``0,System.Nullable{Galaxon.Numerics.BigNumbers.BigDecimal})">
            <summary>
            See if the BigDecimal value is *effectively* equal (within a given tolerance) to another
            numeric value, which could be another BigDecimal, or a standard number type.
            </summary>
            <typeparam name="T">The other number's type.</typeparam>
            <param name="other">The value to compare with.</param>
            <param name="delta">The maximum acceptable difference.</param>
            <exception cref="T:Galaxon.Core.Exceptions.ArgumentInvalidException">
            If the type of the value being compared with the BigDecimal is unsupported.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.CompareTo(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.MaxMagnitude(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
            <see href="https://developer.apple.com/documentation/swift/floatingpoint/maximummagnitude(_:_:)-820gl"/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.MaxMagnitudeNumber(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.MinMagnitude(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
            <see href="https://developer.apple.com/documentation/swift/floatingpoint/minimummagnitude(_:_:)-2i4od"/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.MinMagnitudeNumber(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Equality(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Inequality(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_LessThan(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_LessThanOrEqual(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_GreaterThan(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_GreaterThanOrEqual(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.UnitOfLeastPrecision``1(``0)">
            <summary>
            Get the unit of least precision (ULP) in the provided floating point number.
            </summary>
            <see href="https://en.wikipedia.org/wiki/Unit_in_the_last_place"/>
            <param name="f">A floating point number.</param>
            <typeparam name="T">A standard floating point type.</typeparam>
            <returns>The value of the unit of least precision.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.UnitOfLeastPrecision(System.Decimal)">
            <summary>
            Get the unit of least precision (ULP) in the provided decimal number.
            </summary>
            <param name="m">A decimal value.</param>
            <returns>The value of the unit of least precision.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.UnitOfLeastPrecision(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>
            Get the unit of least precision (ULP) in the provided BigDecimal number.
            </summary>
            <param name="x">A BigDecimal value.</param>
            <returns>The value of the unit of least precision.</returns>
        </member>
        <member name="F:Galaxon.Numerics.BigNumbers.BigDecimal._e">
            <summary>Cached value for e.</summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.E">
            <inheritdoc/>
        </member>
        <member name="F:Galaxon.Numerics.BigNumbers.BigDecimal._pi">
            <summary>Cached value for π.</summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.Pi">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.ComputePi">
            <summary>Compute π.</summary>
            <remarks>
            The Chudnovsky algorithm used here was the one used to generate π to 6.2 trillion decimal
            places, the current world record.
            <see href="https://en.wikipedia.org/wiki/Chudnovsky_algorithm"/>
            </remarks>
        </member>
        <member name="F:Galaxon.Numerics.BigNumbers.BigDecimal._tau">
            <summary>Cached value for τ.</summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.Tau">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.ComputeTau">
            <summary>Compute the value of tau (τ), equal to 2 * pi (2π).</summary>
            <returns>The value of τ to the current number of significant figures.</returns>
        </member>
        <member name="F:Galaxon.Numerics.BigNumbers.BigDecimal._halfPi">
            <summary>Cached value for π/2.</summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.HalfPi">
            <summary>Half pi (π/2).</summary>
        </member>
        <member name="F:Galaxon.Numerics.BigNumbers.BigDecimal._phi">
            <summary>Cached value for φ, the golden ratio.</summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.Phi">
            <summary>The golden ratio (φ).</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.ComputePhi">
            <summary>Compute the value of phi (φ), the golden ratio.</summary>
            <returns>The value of φ to the current number of significant figures.</returns>
        </member>
        <member name="F:Galaxon.Numerics.BigNumbers.BigDecimal._ln10">
            <summary>Cached value for Log(10), the natural logarithm of 10.</summary>
            <remarks>
            This value is cached because of its use in the Log() method. We don't want to have to
            recompute Log(10) every time we call Log().
            </remarks>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.Ln10">
            <summary>The natural logarithm of 10.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Implicit(System.SByte)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast sbyte to BigDecimal.</summary>
            <param name="x">The sbyte value.</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Implicit(System.Byte)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast byte to BigDecimal.</summary>
            <param name="x">The byte value.</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Implicit(System.Int16)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast short to BigDecimal.</summary>
            <param name="x">The short value.</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Implicit(System.UInt16)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast ushort to BigDecimal.</summary>
            <param name="x">The ushort value.</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Implicit(System.Int32)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast int to BigDecimal.</summary>
            <param name="x">The int value.</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Implicit(System.UInt32)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast uint to BigDecimal.</summary>
            <param name="x">The uint value.</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Implicit(System.Int64)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast long to BigDecimal.</summary>
            <param name="x">The long value.</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Implicit(System.UInt64)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast ulong to BigDecimal.</summary>
            <param name="x">The ulong value.</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Implicit(System.Int128)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast Int128 to BigDecimal.</summary>
            <param name="x">The Int128 value.</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Implicit(System.UInt128)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast UInt128 to BigDecimal.</summary>
            <param name="x">The UInt128 value.</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Implicit(System.Numerics.BigInteger)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast BigInteger to BigDecimal.</summary>
            <param name="x">The BigInteger value.</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Implicit(System.Half)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast Half to BigDecimal.</summary>
            <remarks>
            The resulting BigDecimal value is *exactly* the value encoded by the Half, which may not
            exactly match the value *assigned* to the Half, due to limitations of binary floating point
            representation.
            </remarks>
            <param name="x">The Half value.</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Implicit(System.Single)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast float to BigDecimal.</summary>
            <remarks>
            The resulting BigDecimal value is *exactly* the value encoded by the float, which may not
            exactly match the value *assigned* to the float, due to limitations of binary floating point
            representation.
            </remarks>
            <param name="x">The float value.</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Implicit(System.Double)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast double to BigDecimal.</summary>
            <remarks>
            The resulting BigDecimal value is *exactly* the value encoded by the double, which may not
            exactly match the value *assigned* to the double, due to limitations of binary floating
            point representation.
            </remarks>
            <param name="x">The double value.</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Implicit(System.Decimal)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast decimal to BigDecimal.</summary>
            <param name="x">The double value.</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Explicit(Galaxon.Numerics.BigNumbers.BigDecimal)~System.SByte">
            <summary>Cast BigDecimal to sbyte.</summary>
            <param name="bd">The BigDecimal value.</param>
            <returns>The sbyte value formed by truncating the BigDecimal.</returns>
            <exception cref="T:System.OverflowException">
            If the truncated value is outside the valid range for sbyte.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Explicit(Galaxon.Numerics.BigNumbers.BigDecimal)~System.Byte">
            <summary>Cast BigDecimal to byte.</summary>
            <param name="bd">The BigDecimal value.</param>
            <returns>The byte value formed by truncating the BigDecimal.</returns>
            <exception cref="T:System.OverflowException">
            If the truncated value is outside the valid range for sbyte.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Explicit(Galaxon.Numerics.BigNumbers.BigDecimal)~System.Int16">
            <summary>Cast BigDecimal to short.</summary>
            <param name="bd">The BigDecimal value.</param>
            <returns>The short value formed by truncating the BigDecimal.</returns>
            <exception cref="T:System.OverflowException">
            If the truncated value is outside the valid range for short.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Explicit(Galaxon.Numerics.BigNumbers.BigDecimal)~System.UInt16">
            <summary>Cast BigDecimal to ushort.</summary>
            <param name="bd">The BigDecimal value.</param>
            <returns>The ushort value formed by truncating the BigDecimal.</returns>
            <exception cref="T:System.OverflowException">
            If the truncated value is outside the valid range for ushort.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Explicit(Galaxon.Numerics.BigNumbers.BigDecimal)~System.Int32">
            <summary>Cast BigDecimal to int.</summary>
            <param name="bd">The BigDecimal value.</param>
            <returns>The int value formed by truncating the BigDecimal.</returns>
            <exception cref="T:System.OverflowException">
            If the truncated value is outside the valid range for int.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Explicit(Galaxon.Numerics.BigNumbers.BigDecimal)~System.UInt32">
            <summary>Cast BigDecimal to uint.</summary>
            <param name="bd">The BigDecimal value.</param>
            <returns>The uint value formed by truncating the BigDecimal.</returns>
            <exception cref="T:System.OverflowException">
            If the truncated value is outside the valid range for uint.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Explicit(Galaxon.Numerics.BigNumbers.BigDecimal)~System.Int64">
            <summary>Cast BigDecimal to long.</summary>
            <param name="bd">The BigDecimal value.</param>
            <returns>The long value formed by truncating the BigDecimal.</returns>
            <exception cref="T:System.OverflowException">
            If the truncated value is outside the valid range for long.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Explicit(Galaxon.Numerics.BigNumbers.BigDecimal)~System.UInt64">
            <summary>Cast BigDecimal to ulong.</summary>
            <param name="bd">The BigDecimal value.</param>
            <returns>The ulong value formed by truncating the BigDecimal.</returns>
            <exception cref="T:System.OverflowException">
            If the truncated value is outside the valid range for ulong.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Explicit(Galaxon.Numerics.BigNumbers.BigDecimal)~System.Int128">
            <summary>Cast BigDecimal to Int128.</summary>
            <param name="bd">The BigDecimal value.</param>
            <returns>The Int128 value formed by truncating the BigDecimal.</returns>
            <exception cref="T:System.OverflowException">
            If the truncated value is outside the valid range for Int128.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Explicit(Galaxon.Numerics.BigNumbers.BigDecimal)~System.UInt128">
            <summary>Cast BigDecimal to UInt128.</summary>
            <param name="bd">The BigDecimal value.</param>
            <returns>The UInt128 value formed by truncating the BigDecimal.</returns>
            <exception cref="T:System.OverflowException">
            If the truncated value is outside the valid range for UInt128.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Explicit(Galaxon.Numerics.BigNumbers.BigDecimal)~System.Numerics.BigInteger">
            <summary>Cast BigDecimal to BigInteger.</summary>
            <param name="bd">The BigDecimal value.</param>
            <returns>The BigInteger value formed by truncating the BigDecimal.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Explicit(Galaxon.Numerics.BigNumbers.BigDecimal)~System.Half">
            <summary>Cast BigDecimal to Half.</summary>
            <remarks>
            For values outside the valid range for Half, this method will return ±∞ and not throw an
            OverflowException.
            </remarks>
            <param name="bd">The BigDecimal value.</param>
            <returns>The closest Half value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Explicit(Galaxon.Numerics.BigNumbers.BigDecimal)~System.Single">
            <summary>Cast BigDecimal to float.</summary>
            <remarks>
            For values outside the valid range for float, this method will return ±∞ and not throw an
            OverflowException.
            </remarks>
            <param name="bd">The BigDecimal value.</param>
            <returns>The closest float value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Explicit(Galaxon.Numerics.BigNumbers.BigDecimal)~System.Double">
            <summary>Cast BigDecimal to double.</summary>
            <remarks>
            For values outside the valid range for double, this method will return ±∞ and not throw an
            OverflowException.
            </remarks>
            <param name="bd">The BigDecimal value.</param>
            <returns>The closest double value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Explicit(Galaxon.Numerics.BigNumbers.BigDecimal)~System.Decimal">
            <summary>Cast BigDecimal to decimal.</summary>
            <param name="bd">The BigDecimal value.</param>
            <returns>The closest decimal value.</returns>
            <exception cref="T:System.OverflowException">
            If the BigDecimal value is outside the valid range for decimal.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.ToTuple">
            <summary>Convert BigDecimal to tuple.</summary>
            <returns>A tuple containing the significand and exponent.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.FromTuple(System.ValueTuple{System.Numerics.BigInteger,System.Int32})">
            <summary>Construct BigDecimal from tuple of 2 BigInteger values.</summary>
            <param name="values">The tuple.</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.FromSciNotation(System.Decimal,System.Int32)">
            <summary>
            Construct a BigDecimal from a decimal significand and an integer exponent.
            </summary>
            <remarks>
            This method is useful for converting a value expressed in scientific notation to a
            BigDecimal.
            e.g. Avogadro's number, equal to  6.02214 * 10^23, could be converted to a BigDecimal like:
            <code>
            var avnum = BigDecimal.FromSciNotation(6.02214m, 23);
            </code>
            </remarks>
            <param name="significand">The significand or mantissa.</param>
            <param name="exponent">The exponent (defaults to 0).</param>
            <returns>The equivalent BigDecimal value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryConvertFromChecked``1(``0,Galaxon.Numerics.BigNumbers.BigDecimal@)">
            <inheritdoc/>
            <exception cref="T:System.InvalidCastException">
            If no cast operation exists from TOther to BigDecimal.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryConvertFromSaturating``1(``0,Galaxon.Numerics.BigNumbers.BigDecimal@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryConvertFromTruncating``1(``0,Galaxon.Numerics.BigNumbers.BigDecimal@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryConvertToChecked``1(Galaxon.Numerics.BigNumbers.BigDecimal,``0@)">
            <inheritdoc/>
            <exception cref="T:System.InvalidCastException">
            If no cast operation exists from TOther to BigDecimal.
            </exception>
            <exception cref="T:System.OverflowException">
            If the BigDecimal value is outside the range of TOther.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryConvertToSaturating``1(Galaxon.Numerics.BigNumbers.BigDecimal,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryConvertToTruncating``1(Galaxon.Numerics.BigNumbers.BigDecimal,``0@)">
            <inheritdoc/>
            <see cref="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Explicit(Galaxon.Numerics.BigNumbers.BigDecimal)~System.Numerics.BigInteger"/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.ConvertFromFloatingPoint``1(``0)">
            <summary>
            Helper method to convert a standard binary floating point type (Half, float, or double) to a
            BigDecimal.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.ConvertToFloatingPoint``1(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>
            Helper method to convert a BigDecimal to a standard binary floating point type (Half, float,
            or double).
            </summary>
            <remarks>
            If the BigDecimal is outside the range for this type, this method will return negative or
            positive infinity as needed, without throwing an exception.
            </remarks>
            <typeparam name="T">The standard binary floating point type.</typeparam>
            <param name="bd">The BigDecimal value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="F:Galaxon.Numerics.BigNumbers.BigDecimal._significand">
            <summary>Backing field for the Significand property.</summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.Significand">
            <summary>
            The part of a number in scientific notation or in floating-point representation consisting
            of its significant digits. Also known as the mantissa.
            </summary>
            <see href="https://en.wikipedia.org/wiki/Significand"/>
        </member>
        <member name="F:Galaxon.Numerics.BigNumbers.BigDecimal._exponent">
            <summary>Backing field for the Exponent property.</summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.Exponent">
            <summary>The power of 10.</summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.Sign">
            <summary>The sign of the value (-1, 0, or 1).</summary>
            <remarks>
            The same convention is used as for BigInteger:
               -1 means negative
                0 means zero
                1 means positive
            </remarks>
            <see cref="P:System.Numerics.BigInteger.Sign"/>
        </member>
        <member name="F:Galaxon.Numerics.BigNumbers.BigDecimal._digitString">
            <summary>Backing field for the DigitsString property.</summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.DigitsString">
            <summary>
            A string containing the digits of the absolute value of the significand.
            This will not include a leading minus sign if the significand is negative.
            Also, because the BigDecimal is maintained in canonical form, this string will not have any
            leading or trailing zeros, unless the BigDecimal is actually equal to 0.
            </summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.NumSigFigs">
            <summary>Get the number of significant figures.</summary>
        </member>
        <member name="F:Galaxon.Numerics.BigNumbers.BigDecimal._maxSigFigs">
            <summary>Private backing field for MaxSigFigs.</summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.MaxSigFigs">
            <summary>
            This property determines the maximum number of significant figures to keep in a BigDecimal
            value.
            After any calculation, the result will be rounded to this many significant figures.
            This not only helps control memory usage by controlling the size of the significand, but
            also determines when to halt numerical methods, e.g. for calculating a square root or
            logarithm.
            If this property is modified, only new values will be affected by it.
            If you want to reduce the number of significant figures in an existing value, use
            RoundSigFigs().
            </summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.One">
            <inheritdoc/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.NegativeOne">
            <inheritdoc/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.Radix">
            <inheritdoc/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.AdditiveIdentity">
            <inheritdoc/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigDecimal.MultiplicativeIdentity">
            <inheritdoc/>
        </member>
        <member name="F:Galaxon.Numerics.BigNumbers.BigDecimal._DECIMAL_PRECISION">
            <summary>Precision supported by the decimal type.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.#ctor(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Construct a BigDecimal from a BigInteger significand and an integer exponent.
            </summary>
            <param name="significand">The significand or mantissa.</param>
            <param name="exponent">The exponent (defaults to 0).</param>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.#ctor">
            <summary>Construct a zero BigDecimal.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Sqr(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Calculate the square of a BigDecimal value.</summary>
            <param name="x">A BigDecimal value.</param>
            <returns>The square of the BigDecimal.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Cube(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Calculate the cube of a BigDecimal value.</summary>
            <param name="x">A BigDecimal value.</param>
            <returns>The cube of the BigDecimal.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Pow(Galaxon.Numerics.BigNumbers.BigDecimal,System.Numerics.BigInteger)">
            <summary>
            Calculate the value of x^y where x is a BigDecimal and y is a BigInteger.
            Uses exponentiation by squaring for non-trivial parameters.
            </summary>
            <see href="https://en.wikipedia.org/wiki/Exponentiation_by_squaring"/>
            <param name="x">The BigDecimal base.</param>
            <param name="y">The BigInteger exponent.</param>
            <returns>
            The result of the calculation, rounded off to the current value of MaxSigFigs.
            </returns>
            <exception cref="T:System.ArithmeticException">
            If trying to raise 0 to a negative power.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Pow(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
            <exception cref="T:System.ArithmeticException">
            1. If trying to raise 0 to a negative power.
            2. If no real result can be computed.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Pow(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigRational)">
            <summary>
            Calculate a BigDecimal raised to the power of a BigRational.
            This is useful when you want to do things like x^(1/3), but wish to avoid the problem of
            1/3 not being exactly representable by a floating point number type.
            So instead of:
            <code>
            BigDecimal y = BigDecimal.Pow(x, 0.333);
            </code>
            you can do:
            <code>
            BigDecimal y = BigDecimal.Pow(x, new BigRational(1, 3));
            </code>
            This method is only really practical if the denominator of the rational is reasonably small,
            even though in principle it can be any integer value.
            </summary>
            <param name="x">The base.</param>
            <param name="y">The exponent.</param>
            <returns>The result of x raised to the power of y.</returns>
            <exception cref="T:System.ArithmeticException">
            1. If trying to raise 0 to a negative power.
            2. If the denominator is outside the valid range for int.
            3. If the base is negative, the numerator of the exponent is odd, and the denominator of the
            exponent is even. In this case, no real result exists (although a complex result will).
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.RootN(Galaxon.Numerics.BigNumbers.BigDecimal,System.Int32)">
            <inheritdoc/>
            <summary>Find the nth root of a BigDecimal value.</summary>
            <param name="x">The radicand. A BigDecimal value to find the nth root of.</param>
            <param name="n">
            The degree of root to find (2 for square root, 3 for cube root, etc.).
            </param>
            <returns>The nth root of the BigDecimal value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the degree is zero.
            </exception>
            <exception cref="T:System.ArithmeticException">
            If the radicand is negative and the degree is even.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Sqrt(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
            <exception cref="T:System.ArithmeticException">If the argument is negative.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Cbrt(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Hypot(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Exp(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Exp2(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Exp10(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Log(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
            <see href="https://en.wikipedia.org/wiki/Mercator_series"/>
            <exception cref="T:System.ArgumentOutOfRangeException">If x is less than or equal to 0.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Log(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If either parameter is less than or equal to 0, except for the special case where x is 1 and
            y is 0.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Log2(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Log10(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsCanonical(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
            <summary>
            Checks if the value is in its canonical state, which for BigDecimal means the value should
            be zero or the significand should be a number not divisible by 10 (i.e. represented by the
            smallest possible BigInteger).
            If the significand is 0, then the exponent should also be 0.
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsZero(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsNegative(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsPositive(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsInteger(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsOddInteger(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsEvenInteger(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsRealNumber(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsImaginaryNumber(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsComplexNumber(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsFinite(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsInfinity(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsNegativeInfinity(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsPositiveInfinity(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsNaN(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsNormal(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.IsSubnormal(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_UnaryPlus(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_UnaryNegation(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Addition(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Subtraction(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Increment(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Decrement(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Multiply(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Division(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
            <remarks>
            Computes division using the Goldschmidt algorithm:
            <see href="https://en.wikipedia.org/wiki/Division_algorithm#Goldschmidt_division"/>
            </remarks>
            <exception cref="T:System.DivideByZeroException">If y == 0</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_Modulus(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
            <remarks>
            There are various ways to implement the modulo operator:
            <see href="https://en.wikipedia.org/wiki/Modulo"/>
            This method uses truncated division, to match the behaviour of the operator as used with the
            standard number types in .NET.
            It means the result (the remainder) will have the same sign as the dividend (x).
            </remarks>
            <exception cref="T:System.DivideByZeroException">if the divisor is 0.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.op_ExclusiveOr(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Exponentiation operator.</summary>
            <remarks>
            Overloads the ^ operator to perform exponentiation, consistent with common mathematical
            usage.
            While C-based languages traditionally use ^ for bitwise XOR, operator overloading in C#
            allows for a more intuitive use in the context of custom numerical types like BigDecimal,
            BigRational, and BigComplex.
            Many C-inspired languages use ** for the exponentiation operator, but this hasn't been done
            in C# (yet) and isn't possible with operator overloading, as only a small set of standard
            operator tokens can be overloaded.
            </remarks>
            <param name="x">The base.</param>
            <param name="y">The exponent.</param>
            <returns>The first operand raised to the power of the second.</returns>
            <exception cref="T:System.ArithmeticException">
            If the base is 0 and the exponent is negative.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Abs(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Round(Galaxon.Numerics.BigNumbers.BigDecimal,System.Int32,System.MidpointRounding)">
            <inheritdoc/>
            <summary>Round off a value to a given number of decimal places.</summary>
            <remarks>
            The default rounding mode of MidpointRounding.ToEven is the same as used by similar methods
            in .NET Core.
            <see href="https://learn.microsoft.com/en-us/dotnet/api/system.math.round?view=net-7.0#system-math-round(system-double-system-int32)"/>
            </remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.RoundSigFigs(Galaxon.Numerics.BigNumbers.BigDecimal,System.Nullable{System.Int32},System.MidpointRounding)">
            <summary>Round off a BigDecimal value to a certain number of significant figures.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Truncate(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
            <remarks>
            This method should not need to be implemented because it's a static virtual method and the
            default implementation is what we want. However, static virtual methods are not yet
            supported by Rider so we need this here for now.
            </remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Frac(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Return the fractional part of the value.</summary>
            <remarks>
            There are multiple ways to define the frac() function for negative numbers:
            <see href="https://en.wikipedia.org/wiki/Fractional_part"/>
            The definition used in this implementation simply keeps the digits to the right of the
            decimal point, and keeps the sign.
            e.g.
            Frac(12.345) => 0.345
            Frac(-12.345) => -0.345
            The following expression will be true for both positive and negative numbers:
            x == Truncate(x) + Frac(x)
            </remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Floor(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
            <remarks>
            This method should not need to be implemented because it's a static virtual method and the
            default implementation is what we want. However, static virtual methods are not yet
            supported by Rider so we need this here for now.
            </remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Ceiling(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
            <remarks>
            This method should not need to be implemented because it's a static virtual method and the
            default implementation is what we want. However, static virtual methods are not yet
            supported by Rider so we need this here for now.
            </remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.ArithmeticGeometricMean(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>
            Compute the arithmetic-geometric mean of two values.
            </summary>
            <see href="https://en.wikipedia.org/wiki/Arithmetic%E2%80%93geometric_mean"/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.AddGuardDigits(System.Int32)">
            <summary>
            Add guard digits. This reduces errors due to rounding when performing a series of
            calculations.
            </summary>
            <param name="nDigits">The number of guard digits to add.</param>
            <returns>The previous number of guard digits.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.RemoveGuardDigits(Galaxon.Numerics.BigNumbers.BigDecimal,System.Int32)">
            <summary>
            Restore the maximum number of significant figures to a former value guard, and round off a
            BigDecimal value to the new maximum number of significant figures.
            </summary>
            <param name="x">The BigDecimal value to round off.</param>
            <param name="sigFigs">The previous maximum number of significant figures to restore.</param>
            <returns>The BigDecimal value rounded off.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Align(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>
            Adjust the significand and exponent of one of the values so both have the same exponent.
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal._CutDigits(Galaxon.Numerics.BigNumbers.BigDecimal,System.Int32,System.MidpointRounding)">
            <summary>
            Remove some digits from the end of the significand, rounding off if needed, using the
            strategy specified by the rounding mode.
            </summary>
            <param name="x"></param>
            <param name="nDigitsToCut"></param>
            <param name="mode"></param>
            <returns>The rounded-off value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal._Shift(Galaxon.Numerics.BigNumbers.BigDecimal,System.Int32)">
            <summary>
            Generate a new significand, found by shifting the exponent of the BigDecimal to the provided
            new exponent.
            The combination of the result significand and the provided exponent parameter represent a
            new BigDecimal value equal to the provided value.
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal._MakeCanonical(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Modify the provided significand and exponent as needed to find the canonical form.
            Static form of the method, for use in the constructor.
            </summary>
            <returns>The two updated BigIntegers.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <inheritdoc/>
            <remarks>Ignoring style parameter for now.</remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Parse(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Parse(System.String)">
            <summary>Simplest version of Parse().</summary>
            <param name="s">The string to parse.</param>
            <returns>The BigDecimal value represented by the string.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
            <inheritdoc/>
            <remarks>Ignoring style parameter for now.</remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Galaxon.Numerics.BigNumbers.BigDecimal@)">
            <inheritdoc/>
            <remarks>Ignoring style parameter for now.</remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryParse(System.String,System.IFormatProvider,Galaxon.Numerics.BigNumbers.BigDecimal@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryParse(System.String,Galaxon.Numerics.BigNumbers.BigDecimal@)">
            <summary>Simplest version of TryParse().</summary>
            <param name="s">The string to parse.</param>
            <param name="result">The BigDecimal value represented by the string.</param>
            <returns>If the attempt to parse the value succeeded.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,Galaxon.Numerics.BigNumbers.BigDecimal@)">
            <inheritdoc/>
            <remarks>Ignoring style parameter for now.</remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,Galaxon.Numerics.BigNumbers.BigDecimal@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.ToString(System.String,System.IFormatProvider)">
            <summary>
            Format the BigDecimal as a string.
            Supported formats are the usual: D, E, F, G, N, P, and R.
            <see href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings"/>
            Although "D" is normally only used by integral types, in this case both the significand and
            exponent will be formatted as integers.
            An secondary code "U" is provided, which follows the precision (if given).
            - If omitted, the exponent (if present) will be formatted with the usual E[-+]999 format.
            - If present, the exponent is formatted with "×10" instead of "E" and the exponent digits
            will be rendered as superscript. Also, a "+" sign is not used for positive exponents,
            and the exponent digits are not zero-padded.
            Example: "E7U" will format as per usual (E with 7 decimal digits), except using Unicode
            characters for the exponent part.
            Codes "R" and "D" will produce the same output. However, the Unicode flag is undefined with
            "R", because Parse() doesn't support superscript exponents.
            </summary>
            <param name="specifier">The format specifier (default "G").</param>
            <param name="provider">The format provider (default null).</param>
            <returns>The formatted string.</returns>
            <exception cref="T:Galaxon.Core.Exceptions.ArgumentInvalidException">If the format specifier is invalid.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.ToString(System.String)">
            <summary>
            Format the BigDecimal as a string.
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.PreformatFixed">
            <summary>
            From a BigDecimal, extract two strings of digits that would appear if the number was written
            in fixed-point format (i.e. without an exponent).
            Sign is ignored.
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.FormatFixed(System.String,System.Nullable{System.Int32},System.IFormatProvider)">
            <summary>
            Format the BigDecimal as a fixed-point number with a given precision.
            </summary>
            <param name="format">The format to use.</param>
            <param name="precision">The number of decimal places.</param>
            <param name="provider">The format provider.</param>
            <returns></returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.FormatFixedSigFigs(System.Nullable{System.Int32},System.IFormatProvider)">
            <summary>
            Format as fixed point, except in this case the precision is the number of significant
            figures, not the number of decimal places.
            Note, this is not technically formatting as significant figures, since trailing 0s following
            the decimal point are not retained, as per the usual format for "G".
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.FormatScientific(System.String,System.Nullable{System.Int32},System.Boolean,System.Int32,System.IFormatProvider)">
            <summary>
            Format the value using scientific notation.
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.FormatExponent(System.String,System.Numerics.BigInteger,System.Boolean,System.Int32,System.IFormatProvider)">
            <summary>
            Format the exponent part of scientific notation.
            </summary>
            <param name="format">
            The original format code (e.g. E, e, G, or g). We need to know this to determine whether to
            use an upper- or lower-case 'E'.
            </param>
            <param name="exp">The exponent value.</param>
            <param name="unicode">Whether to use Unicode or standard format.</param>
            <param name="expWidth">
            The minimum number of digits in the exponent (typically 3 for E and 2 for G).
            Relevant for standard (non-Unicode) format only.
            </param>
            <param name="provider">The format provider.</param>
            <returns>The formatted exponent.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.FormatRegex">
            <remarks>
            Pattern:<br/>
            <code>^(?&lt;format&gt;[DEFGNPR])(?&lt;precision&gt;\\d*)(?&lt;unicode&gt;U?)$</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ "format" capture group.<br/>
                ○ Match a character in the set [D-GNPRd-gnpr].<br/>
            ○ "precision" capture group.<br/>
                ○ Match a Unicode digit atomically any number of times.<br/>
            ○ "unicode" capture group.<br/>
                ○ Match a character in the set [Uu] atomically, optionally.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.RemoveIgnoredCharacters(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Removed ignored characters from a string we want to parse, i.e. whitespace and digit
            grouping characters, which includes the usual comma or period (depending on the culture
            specified by the NumberFormatInfo parameter), as well as underscores and thin spaces.
            </summary>
            <param name="s">The string.</param>
            <param name="nfi">The NumberFormatInfo.</param>
            <returns>The string with the ignored characters removed.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Sin(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.SinPi(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Cos(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
            <see href="https://en.wikipedia.org/wiki/Taylor_series#Trigonometric_functions"/>
            <see href="https://en.wikipedia.org/wiki/Sine_and_cosine#Series_definitions"/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.CosPi(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.SinCos(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.SinCosPi(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Tan(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.TanPi(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Cot(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Calculate the cotangent of a BigDecimal value.</summary>
            <param name="x">The BigDecimal value.</param>
            <returns>The cotangent.</returns>
            <exception cref="T:System.DivideByZeroException">If the sine of the angle is 0.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Sec(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Calculate the secant of a BigDecimal value.</summary>
            <param name="x">The BigDecimal value.</param>
            <returns>The secant.</returns>
            <exception cref="T:System.DivideByZeroException">If the cosine of the angle is 0.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Csc(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Calculate the cosecant of a BigDecimal value.</summary>
            <param name="x">The BigDecimal value.</param>
            <returns>The cosecant.</returns>
            <exception cref="T:System.DivideByZeroException">If the sine of the angle is 0.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Asin(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.AsinPi(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Acos(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.AcosPi(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Atan(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.AtanPi(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Atan2(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>
            This two-argument variation of the Atan() method comes originally from FORTRAN.
            If x is non-negative, it will find the same result as Atan(y / x).
            If x is negative, the result will be offset by π.
            The purpose of the method is to produce a correct value for the polar angle when converting
            from cartesian coordinates to polar coordinates.
            It also avoids division by 0 exceptions.
            </summary>
            <see href="https://en.wikipedia.org/wiki/Atan2"/>
            <see cref="M:Galaxon.Numerics.BigNumbers.BigDecimal.CartesianToPolar(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)"/>
            <param name="y">The y coordinate.</param>
            <param name="x">The x coordinate.</param>
            <returns>The polar angle.</returns>
            <see cref="M:System.Double.Atan2(System.Double,System.Double)"/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Atan2Pi(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>
            Computes the arc-tangent for the quotient of two values and divides the result by pi.
            </summary>
            <param name="y">The y coordinate.</param>
            <param name="x">The x coordinate.</param>
            <returns>The polar angle.</returns>
            <exception cref="T:Galaxon.Core.Exceptions.ArgumentInvalidException">If x and y both equal 0.</exception>
            <see cref="M:System.Double.Atan2Pi(System.Double,System.Double)"/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Acot(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Calculate the inverse cotangent of a BigDecimal value.</summary>
            <param name="x">The BigDecimal value.</param>
            <returns>The inverse cotangent.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Asec(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Calculate the inverse secant of a BigDecimal value.</summary>
            <param name="x">The BigDecimal value.</param>
            <returns>The inverse secant.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Acsc(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Calculate the inverse cosecant of a BigDecimal value.</summary>
            <param name="x">The BigDecimal value.</param>
            <returns>The inverse cosecant.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Sinh(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Cosh(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Tanh(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Coth(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Calculate the hyperbolic cotangent of a BigDecimal value.</summary>
            <param name="x">The BigDecimal value.</param>
            <returns>The hyperbolic cotangent.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Sech(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Calculate the hyperbolic secant of a BigDecimal value.</summary>
            <param name="x">The BigDecimal value.</param>
            <returns>The hyperbolic secant.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Csch(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Calculate the hyperbolic cosecant of a BigDecimal value.</summary>
            <param name="x">The BigDecimal value.</param>
            <returns>The hyperbolic cosecant.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Asinh(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Acosh(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Atanh(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Acoth(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Calculate the inverse hyperbolic cotangent of a BigDecimal value.</summary>
            <param name="x">The BigDecimal value.</param>
            <returns>The inverse hyperbolic cotangent.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Asech(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Calculate the inverse hyperbolic secant of a BigDecimal value.</summary>
            <param name="x">The BigDecimal value.</param>
            <returns>The inverse hyperbolic secant.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.Acsch(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Calculate the inverse hyperbolic cosecant of a BigDecimal value.</summary>
            <param name="x">The BigDecimal value.</param>
            <returns>The inverse hyperbolic cosecant.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.CartesianToPolar(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>
            Convert cartesian coordinates to polar coordinates.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>A tuple containing the radius (r) and phase angle (theta).</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.PolarToCartesian(Galaxon.Numerics.BigNumbers.BigDecimal,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>
            Convert polar coordinates to cartesian coordinates.
            </summary>
            <param name="r">The radius.</param>
            <param name="theta">The phase angle.</param>
            <returns>A tuple containing the x and y coordinates.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigDecimal.NormalizeAngle(Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>Find the equivalent angle in the interval [0, 𝞃).</summary>
        </member>
        <member name="T:Galaxon.Numerics.BigNumbers.BigRational">
            <summary>
            Encapsulates a rational.
            <see href="https://en.wikipedia.org/wiki/Rational_number"/>
            <see href="https://introcs.cs.princeton.edu/java/92symbolic/BigRational.java.html"/>
            <see href="https://github.com/danm-de/BigRationals"/>
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Equals(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.CompareTo(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
            <remarks>
            Although the specification says any negative value indicates the "this" operand comes before
            the "br" operand (similar for positive values), in this method the result is constrained
            to only 3 possible values:
            -1 means "this" comes before (and is less than) "br"
            0 means they are equal
            1 means "this" comes after (and is greater than) "br"
            </remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.MaxMagnitude(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.MaxMagnitudeNumber(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.MinMagnitude(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.MinMagnitudeNumber(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Equality(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Inequality(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_LessThan(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_LessThanOrEqual(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_GreaterThan(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_GreaterThanOrEqual(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Implicit(System.SByte)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast sbyte to BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Implicit(System.Byte)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast byte to BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Implicit(System.Int16)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast short to BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Implicit(System.UInt16)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast ushort to BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Implicit(System.Int32)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast int to BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Implicit(System.UInt32)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast uint to BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Implicit(System.Int64)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast long to BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Implicit(System.UInt64)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast ulong to BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Implicit(System.Int128)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast Int128 to BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Implicit(System.UInt128)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast UInt128 to BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Implicit(System.Numerics.BigInteger)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast BigInteger to BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Implicit(System.Half)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast Half to BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Implicit(System.Single)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast float to BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Implicit(System.Double)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast double to BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Implicit(System.Decimal)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast decimal to BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Implicit(Galaxon.Numerics.BigNumbers.BigDecimal)~Galaxon.Numerics.BigNumbers.BigRational">
            <summary>Cast BigDecimal to BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~System.SByte">
            <summary>Cast BigRational to sbyte.</summary>
            <exception cref="T:System.OverflowException">If the result is outside the range of sbyte.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~System.Byte">
            <summary>Cast BigRational to byte.</summary>
            <exception cref="T:System.OverflowException">If the result is outside the range of byte.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~System.Int16">
            <summary>Cast BigRational to short.</summary>
            <exception cref="T:System.OverflowException">If the result is outside the range of short.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~System.UInt16">
            <summary>Cast BigRational to ushort.</summary>
            <exception cref="T:System.OverflowException">
            If the result is outside the range of ushort.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~System.Int32">
            <summary>Cast BigRational to an int.</summary>
            <exception cref="T:System.OverflowException">If the result is outside the range of int.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~System.UInt32">
            <summary>Cast BigRational to uint.</summary>
            <exception cref="T:System.OverflowException">If the result is outside the range of uint.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~System.Int64">
            <summary>Cast BigRational to long.</summary>
            <exception cref="T:System.OverflowException">If the result is outside the range of long.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~System.UInt64">
            <summary>Cast BigRational to ulong.</summary>
            <exception cref="T:System.OverflowException">If the result is outside the range of ulong.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~System.Int128">
            <summary>Cast BigRational to an Int128.</summary>
            <exception cref="T:System.OverflowException">If the result is outside the range of Int128.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~System.UInt128">
            <summary>Cast BigRational to UInt128.</summary>
            <exception cref="T:System.OverflowException">If the result is outside the range of UInt128.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~System.Numerics.BigInteger">
            <summary>Cast BigRational to BigInteger.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~System.Half">
            <summary>Cast BigRational to Half.</summary>
            <exception cref="T:System.OverflowException">If the result is outside the range of Half.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~System.Single">
            <summary>Cast BigRational to float.</summary>
            <exception cref="T:System.OverflowException">If the result is outside the range of float.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~System.Double">
            <summary>Cast BigRational to double.</summary>
            <exception cref="T:System.OverflowException">
            If the result is outside the range of double.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~System.Decimal">
            <summary>Cast BigRational to decimal.</summary>
            <exception cref="T:System.OverflowException">
            If the result is outside the range of decimal.
            </exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Explicit(Galaxon.Numerics.BigNumbers.BigRational)~Galaxon.Numerics.BigNumbers.BigDecimal">
            <summary>Cast BigRational to BigDecimal.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.ToTuple">
            <summary>Convert BigRational to tuple.</summary>
            <returns>A tuple with 2 BigIntegers, equal to the numerator and denominator.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.FromTuple(System.ValueTuple{System.Numerics.BigInteger,System.Numerics.BigInteger})">
            <summary>Construct a BigRational from a tuple of 2 BigInteger values.</summary>
            <param name="rational">The tuple.</param>
            <returns>The equivalent BigRational value.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.TryConvertFromChecked``1(``0,Galaxon.Numerics.BigNumbers.BigRational@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.TryConvertFromSaturating``1(``0,Galaxon.Numerics.BigNumbers.BigRational@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.TryConvertFromTruncating``1(``0,Galaxon.Numerics.BigNumbers.BigRational@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.TryConvertToChecked``1(Galaxon.Numerics.BigNumbers.BigRational,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.TryConvertToSaturating``1(Galaxon.Numerics.BigNumbers.BigRational,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.TryConvertToTruncating``1(Galaxon.Numerics.BigNumbers.BigRational,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.ConvertFromFloatingPoint``1(``0)">
            <summary>
            Cast standard binary floating point value to BigRational.
            This can be done exactly.
            </summary>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigRational.Numerator">
            <summary>The numerator of the rational number.</summary>
            <remarks>This can be any integer.</remarks>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigRational.Denominator">
            <summary>The denominator of the rational number.</summary>
            <remarks>
            This value should always be positive.
            It should never 0 because this would not be a rational number.
            It should also never be negative. The sign of the rational is determined by the numerator.
            </remarks>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigRational.Sign">
            <summary>The sign of the value.</summary>
            <remarks>
            The same convention is used as for BigInteger:
            -1 means negative
            0 means zero
            1 means positive
            </remarks>
            <see cref="P:System.Numerics.BigInteger.Sign"/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigRational.Zero">
            <inheritdoc/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigRational.One">
            <inheritdoc/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigRational.Radix">
            <inheritdoc/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigRational.AdditiveIdentity">
            <inheritdoc/>
        </member>
        <member name="P:Galaxon.Numerics.BigNumbers.BigRational.MultiplicativeIdentity">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Construct a BigRational from two integers, the numerator and denominator.
            The fraction is automatically reduced to its simplest form.
            </summary>
            <param name="num">The numerator.</param>
            <param name="den">The denominator.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the denominator is 0.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.#ctor(System.Numerics.BigInteger)">
            <summary>Construct a BigRational from a single integer, taken to be the numerator.</summary>
            <param name="num">The numerator.</param>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.#ctor">
            <summary>Construct a zero BigRational.</summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Pow(Galaxon.Numerics.BigNumbers.BigRational,System.Int32)">
            <summary>
            Calculate the value of x^y where x is a BigRational and y is an int.
            </summary>
            <param name="x">The base (BigRational).</param>
            <param name="y">The exponent (int).</param>
            <returns>The result of the calculation.</returns>
            <see cref="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)"/>
            <exception cref="T:System.ArgumentOutOfRangeException">If x is 0 and y is negative.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Sqr(Galaxon.Numerics.BigNumbers.BigRational)">
            <summary>Calculate the square of a BigRational number.</summary>
            <param name="x">A BigRational value.</param>
            <returns>The square of the parameter.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Cube(Galaxon.Numerics.BigNumbers.BigRational)">
            <summary>Calculate the cube of a BigRational number.</summary>
            <param name="x">A BigRational value.</param>
            <returns>The cube of the parameter.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsCanonical(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
            <remarks>
            A BigRational value should always be kept in canonical form, which means:
            - reduced to the simplest possible ratio of integers
            - the denominator should be positive
            </remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsZero(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsNegative(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsPositive(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsInteger(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsOddInteger(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsEvenInteger(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsRealNumber(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsImaginaryNumber(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsComplexNumber(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsFinite(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsInfinity(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsNegativeInfinity(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsPositiveInfinity(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsNaN(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsNormal(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsSubnormal(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.IsDyadic(Galaxon.Numerics.BigNumbers.BigRational)">
            <summary>
            Check if a BigRational is a dyadic rational, which means the denominator is a power of 2.
            <see href="https://en.wikipedia.org/wiki/Dyadic_rational"/>
            </summary>
            <param name="value">The BigRational value to inspect.</param>
            <returns>If the value is a dyadic rational.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Reduce(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>Reduce a rational given as a numerator and denominator.</summary>
            <remarks>
            I've made this version, which doesn't receive or return a BigRational object, so it can be
            called from the constructor.
            </remarks>
            <param name="num">The numerator.</param>
            <param name="den">The denominator.</param>
            <returns>The numerator and denominator of the reduced fraction, as s tuple.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Abs(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Clone(Galaxon.Numerics.BigNumbers.BigRational)">
            <summary>Clone method.</summary>
            <param name="br">The BigRational value to clone.</param>
            <returns>A new BigRational with the same value as the parameter.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Negate(Galaxon.Numerics.BigNumbers.BigRational)">
            <summary>Negate method.</summary>
            <param name="br">The BigRational value to negate.</param>
            <returns>The negation of the parameter.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Add(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <summary>Addition method.</summary>
            <param name="br">The left-hand operand.</param>
            <param name="br2">The right-hand operand.</param>
            <returns>The addition of the arguments.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Subtract(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <summary>Subtraction method.</summary>
            <param name="br">The left-hand operand.</param>
            <param name="br2">The right-hand operand.</param>
            <returns>The subtraction of the arguments.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Multiply(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <summary>Multiply two BigRational values.</summary>
            <param name="br">The left-hand operand.</param>
            <param name="br2">The right-hand operand.</param>
            <returns>The multiplication of the arguments.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Divide(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <summary>Divide one BigRational by another.</summary>
            <param name="br">The left-hand operand.</param>
            <param name="br2">The right-hand operand.</param>
            <returns>The division of the arguments.</returns>
            <exception cref="T:System.DivideByZeroException">If w == 0</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Reciprocal(Galaxon.Numerics.BigNumbers.BigRational)">
            <summary>Calculate the reciprocal of a BigRational value.</summary>
            <param name="br">A BigRational value.</param>
            <returns>The reciprocal of the BigRational value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the BigRational value is 0.</exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_UnaryPlus(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_UnaryNegation(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Addition(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Subtraction(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Increment(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Decrement(Galaxon.Numerics.BigNumbers.BigRational)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Multiply(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <summary>
            Multiply a rational by a rational.
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_Division(Galaxon.Numerics.BigNumbers.BigRational,Galaxon.Numerics.BigNumbers.BigRational)">
            <summary>
            Divide a rational by a rational.
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.op_ExclusiveOr(Galaxon.Numerics.BigNumbers.BigRational,System.Int32)">
            <summary>
            Exponentiation operator.
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <inheritdoc/>
            <remarks>Ignoring style parameter for now.</remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Parse(System.String,System.IFormatProvider)">
             <summary>
             Parse a string into a rational.
             This version of the method is required to implement IParsable[BigRational], but it's more
             likely people will call the version that doesn't have the provider parameter.
            
             Notes:
             - The numerator can have an optional sign (+ or -), but not the denominator.
             - The divide sign and denominator can either both be present or both be omitted.
             </summary>
             <exception cref="T:Galaxon.Core.Exceptions.ArgumentFormatException"></exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Parse(System.String)">
            <summary>Simplest version of Parse().</summary>
            <param name="s">The string to parse.</param>
            <returns>The BigRational value represented by the string.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
            <inheritdoc/>
            <remarks>Ignoring style parameter for now.</remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Galaxon.Numerics.BigNumbers.BigRational@)">
            <inheritdoc/>
            <remarks>Ignoring style parameter for now.</remarks>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.TryParse(System.String,System.IFormatProvider,Galaxon.Numerics.BigNumbers.BigRational@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.TryParse(System.String,Galaxon.Numerics.BigNumbers.BigRational@)">
            <summary>Simplest version of TryParse().</summary>
            <param name="s">The string to parse.</param>
            <param name="result">The BigRational value represented by the string.</param>
            <returns>If the attempt to parse the value succeeded.</returns>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,Galaxon.Numerics.BigNumbers.BigRational@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,Galaxon.Numerics.BigNumbers.BigRational@)">
            <inheritdoc/>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
            <todo>
            Update to support standard format strings for integers, namely D, N, R, with the optional U
            code, same as for BigDecimal. Remove "A", keep "M" for mixed.
            </todo>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.ToString(System.String)">
            <summary>
            Format the rational as a string.
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.ToString">
            <summary>
            Format the rational as a string.
            The is the default override version, which uses Unicode characters for a nicer format.
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.BigRational.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Galaxon.Numerics.BigNumbers.Testing.BigComplexAssert">
            <summary>
            Methods for unit tests relating to BigComplex values.
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.Testing.BigComplexAssert.AreFuzzyEqual``1(``0,Galaxon.Numerics.BigNumbers.BigComplex)">
            <summary>
            See if an actual BigComplex value is effectively equal to to an expected number (real or
            complex).
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">If the values are not effectively equal.</exception>
        </member>
        <member name="T:Galaxon.Numerics.BigNumbers.Testing.BigDecimalAssert">
            <summary>
            Assert methods for BigDecimal. Analogous to StringAssert.
            </summary>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.Testing.BigDecimalAssert.AreFuzzyEqual``1(``0,Galaxon.Numerics.BigNumbers.BigDecimal,System.Nullable{Galaxon.Numerics.BigNumbers.BigDecimal})">
            <summary>
            See if an actual BigDecimal value is approximately equal to an expected value, which can be
            any supported real number type (i.e. all standard real number types, and BigDecimal).
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="delta">The maximum acceptable difference between the 2 values.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"></exception>
        </member>
        <member name="M:Galaxon.Numerics.BigNumbers.Testing.BigDecimalAssert.AreEqual``1(``0,Galaxon.Numerics.BigNumbers.BigDecimal)">
            <summary>
            See if an actual BigDecimal value is exactly equal to an expected value, which can be
            any supported real number type (i.e. all standard real number types, and BigDecimal).
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"></exception>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormatRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the FormatRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.FormatRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormatRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormatRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormatRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormatRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormatRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormatRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormatRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
