<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Galaxon.Core</name>
    </assembly>
    <members>
        <member name="T:Galaxon.Core.Collections.CollectionExtensions">
            <summary>
            Extension methods for ICollection and ICollection{T}.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Collections.CollectionExtensions.IsEmpty(System.Collections.ICollection)">
            <summary>
            Check if an ICollection (array, list, etc.) is null or empty.
            </summary>
        </member>
        <member name="T:Galaxon.Core.Collections.DictionaryExtensions">
            <summary>
            Extension methods for Dictionary.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Collections.DictionaryExtensions.HasUniqueValues``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Checks if a dictionary contains unique values.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dict">The dictionary to check.</param>
            <returns>True if the dictionary contains unique values; otherwise, false.</returns>
            <remarks>
            This method utilizes LINQ's All method to efficiently check if all values in the dictionary
            are unique. It uses a HashSet to track unique values.
            </remarks>
        </member>
        <member name="M:Galaxon.Core.Collections.DictionaryExtensions.Flip``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Create a new dictionary from the instance with keys and values flipped.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dict">The dictionary to flip.</param>
            <returns>The flipped dictionary.</returns>
            <exception cref="T:Galaxon.Core.Exceptions.ArgumentInvalidException">
            If the instance contains duplicate values.
            </exception>
        </member>
        <member name="T:Galaxon.Core.Collections.EnumerableExtensions">
            <summary>
            Extension methods for IEnumerable and IEnumerable{T}.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Collections.EnumerableExtensions.Diff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return values from one collection with values from a second collection removed.
            This method supports duplicates, so this is not the same as set difference.
            For example, if list1 has two instances of "cat" and list2 has one instance of "cat", the
            result will have one instance of "cat".
            </summary>
        </member>
        <member name="M:Galaxon.Core.Collections.EnumerableExtensions.ToIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an IEnumerable of objects with an Id property to a Dictionary{int, T},
            using the value of the Id property as the key.
            </summary>
            <typeparam name="T">The type of objects in the IEnumerable.</typeparam>
            <param name="items">The IEnumerable of objects.</param>
            <returns>
            A Dictionary{int, T} with the Id property values as keys and the objects as values.
            </returns>
        </member>
        <member name="T:Galaxon.Core.Exceptions.ArgumentFormatException">
             <summary>
             This exception type is useful for an ArgumentException that is also a FormatException.
            
             It has the advantage over FormatException of allowing the name of the parameter to be specified.
             The usual FormatException is probably best reserved for situations not involving method
             parameters, e.g. parsing a file.
            
             I'm using the same parameter order here as used by ArgumentNullException and
             ArgumentOutOfRangeException.
             i.e. (paramName, message), for consistency. The base class, ArgumentException,
             has the parameters in a different order, i.e. (message, paramName), which can be confusing.
             For this reason, I've resolved not to use ArgumentException anymore but to treat it as an
             abstract base class.
             This will avoid the issue with the arguments being out of order, and the lack of specificity.
             Normally for any ArgumentException we want to identify the argument causing the exception (which
             should be done using nameof()), unless there are several, in which case the offending arguments
             can be identified in the message.
             </summary>
             <see cref="T:System.FormatException"/>
             <see cref="T:System.ArgumentException"/>
             <see cref="T:System.ArgumentNullException"/>
             <see cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Galaxon.Core.Exceptions.ArgumentFormatException.#ctor">
            <summary>
            Initializes a new instance of the ArgumentFormatException class.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Exceptions.ArgumentFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ArgumentFormatException class with an error message, and
            (optionally) a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Galaxon.Core.Exceptions.ArgumentFormatException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ArgumentFormatException class with the parameter name, an
            error message, and (optionally) a reference to the inner exception that is the cause of this
            exception.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Galaxon.Core.Exceptions.ArgumentInvalidException">
            <summary>
            This exception type is useful for an ArgumentException when the argument is invalid for a
            reason other than being null, out of range, or having an invalid format.
            I'm using the same parameter order here as used by ArgumentNullException and
            ArgumentOutOfRangeException, i.e. (paramName, message), for consistency. The base class,
            ArgumentException, has the parameters in a different order, i.e. (message, paramName), which can
            be confusing.
            I've resolved not to use ArgumentException anymore but to treat it as an abstract base class.
            This will avoid the issue with the arguments being out of order, and the lack of specificity.
            Normally for any ArgumentException we want to identify the argument causing the exception (which
            should be done using nameof()), unless there are several, in which case the offending arguments
            can be identified in the message.
            </summary>
            <see cref="T:System.ArgumentException"/>
            <see cref="T:System.ArgumentNullException"/>
            <see cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Galaxon.Core.Exceptions.ArgumentInvalidException.#ctor">
            <summary>
            Initializes a new instance of the ArgumentInvalidException class.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Exceptions.ArgumentInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ArgumentInvalidException class with an error message, and
            (optionally) a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Galaxon.Core.Exceptions.ArgumentInvalidException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ArgumentInvalidException class with the parameter name, an
            error message, and (optionally) a reference to the inner exception that is the cause of this
            exception.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Galaxon.Core.Exceptions.DataNotFoundException">
            <summary>
            Exception for when an attempt is made to obtain data from a database, but it isn't found.
            It's a bit more specific than DataException, and sometimes ObjectNotFoundException is not
            exactly what is meant.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Exceptions.DataNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DataNotFoundException class with an error message
            (optional), and a reference to the inner exception that is the cause of this exception
            (optional).
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Galaxon.Core.Exceptions.MatchNotFoundException">
            <summary>
            This exception type is similar to ArgumentOutOfRangeException, except intended for use in switch
            statements and expressions, when the value being tested matches none of the patterns.
            It could also be used for when a string doesn't match a regular expression.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Exceptions.MatchNotFoundException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Exceptions.MatchNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with an error message, and (optionally) a reference to the inner
            exception that is the cause of this exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Galaxon.Core.Files.DirectoryUtility">
            <summary>
            Extension methods for the Directory class, and other useful methods for working with
            directories.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Files.DirectoryUtility.GetParentDirectoryByFileType(System.String)">
            <summary>
            Gets the path to the closest ancestor directory to the current (assembly) directory
            (which could be itself) containing a file with the specified extension.
            </summary>
            <returns>
            The path to the directory if found, or <c>null</c>.
            </returns>
        </member>
        <member name="M:Galaxon.Core.Files.DirectoryUtility.GetSolutionDirectory">
            <summary>
            Gets the path to the directory containing the solution file (.sln).
            </summary>
            <returns>
            The path to the solution directory if found, or <c>null</c> if no solution file was found.
            </returns>
        </member>
        <member name="M:Galaxon.Core.Files.DirectoryUtility.GetProjectDirectory">
            <summary>
            Gets the path to the directory containing the project file (.csproj).
            </summary>
            <returns>
            The path to the project directory if found, or <c>null</c> if no project file was found.
            </returns>
        </member>
        <member name="T:Galaxon.Core.Functional.Memoization">
            <summary>
            Enables memoization of pure functions by remembering previous results.
            </summary>
        </member>
        <member name="P:Galaxon.Core.Functional.Memoization.DebugMode">
            <summary>
            Set to true if you want to check if cache is being used to get a result.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Functional.Memoization.Memoize``2(System.Func{``0,``1})">
            <summary>
            Enables caching of the results of unary pure functions.
            </summary>
            <param name="f">The pure function.</param>
            <typeparam name="T">The input type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <returns>The memoized version of the pure function.</returns>
        </member>
        <member name="M:Galaxon.Core.Functional.Memoization.Memoize``3(System.Func{``0,``1,``2})">
            <summary>
            Enables caching of the results of binary pure functions.
            </summary>
            <param name="f">The pure function.</param>
            <typeparam name="T1">First argument type.</typeparam>
            <typeparam name="T2">Second argument type.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <returns>The memoized version of the pure function.</returns>
        </member>
        <member name="T:Galaxon.Core.Strings.EStringCase">
            <summary>
            May extend later with LowerSnake, LowerCamel, UpperSnake, UpperCamel, but I'd prefer to keep it
            simple for now.
            </summary>
        </member>
        <member name="F:Galaxon.Core.Strings.EStringCase.None">
            <summary>
            No case. Applies to empty strings, or strings of whitespace, or strings not containing
            letters (e.g. numbers).
            </summary>
        </member>
        <member name="F:Galaxon.Core.Strings.EStringCase.Lower">
            <summary>
            Lower case.
            </summary>
        </member>
        <member name="F:Galaxon.Core.Strings.EStringCase.Upper">
            <summary>
            Upper case.
            </summary>
        </member>
        <member name="F:Galaxon.Core.Strings.EStringCase.UpperFirstLetter">
            <summary>
            Upper case, first letter only.
            </summary>
        </member>
        <member name="F:Galaxon.Core.Strings.EStringCase.Proper">
            <summary>
            Proper case.
            NB: This is not the same as title case.
            In proper case, every word has the first letter upper case, and other letters lower-case.
            In title case, some short words like articles and prepositions are all lower-case.
            </summary>
        </member>
        <member name="F:Galaxon.Core.Strings.EStringCase.Mixed">
            <summary>
            Mixed case.
            </summary>
        </member>
        <member name="T:Galaxon.Core.Strings.StringBuilderExtensions">
            <summary>
            Extension methods for StringBuilder.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Strings.StringBuilderExtensions.Prepend(System.Text.StringBuilder,System.Object)">
            <summary>
            Inserts the string representation of the specified object at the beginning of the current
            StringBuilder.
            </summary>
            <param name="sb">The StringBuilder instance.</param>
            <param name="value">The object to prepend. If null, no action is taken.</param>
            <returns>The current StringBuilder instance.</returns>
        </member>
        <member name="T:Galaxon.Core.Strings.StringExtensions">
            <summary>
            Extension methods for String.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Strings.StringExtensions.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Determines whether two strings are equal, ignoring case sensitivity.
            </summary>
            <param name="str1">The first string to compare.</param>
            <param name="str2">The second string to compare.</param>
            <returns>True if the strings are equal, ignoring case; otherwise, false.</returns>
        </member>
        <member name="M:Galaxon.Core.Strings.StringExtensions.ReplaceChars(System.String,System.Collections.Generic.Dictionary{System.Char,System.String},System.Boolean)">
            <summary>
            Replace characters in a string with other characters by using a character map.
            Example use cases:
            * making a string upper- or lower-case
            * converting lowercase characters to small caps
            * making a string superscript or subscript
            * transliteration/removal of diacritics
            </summary>
            <param name="str">The original string.</param>
            <param name="charMap">The character map.</param>
            <param name="keepCharsNotInMap">
            If a character is encountered that is not in the character
            map, either keep it (true) or skip it (false).
            </param>
            <returns>The transformed string.</returns>
        </member>
        <member name="M:Galaxon.Core.Strings.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
            Constructs a new string by repeating a specified string a specified number of times.
            </summary>
            <param name="s">The string to repeat.</param>
            <param name="n">The number of times to repeat the string.</param>
            <returns>A new string that consists of 'n' repetitions of the input string.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when 'n' is negative.</exception>
        </member>
        <member name="M:Galaxon.Core.Strings.StringExtensions.StripBrackets(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Remove brackets (and whatever is between them) from a string.
            One use case is stripping HTML tags.
            TODO Unit tests, if I decide to keep this method.
            </summary>
            <param name="str">The string to process.</param>
            <param name="round">If round brackets should be removed.</param>
            <param name="square">If square brackets should be removed</param>
            <param name="curly">If curly brackets should be removed</param>
            <param name="angle">If angle brackets should be removed</param>
            <returns>The string with brackets removed.</returns>
        </member>
        <member name="M:Galaxon.Core.Strings.StringExtensions.StripTags(System.String)">
            <summary>
            Strip HTML tags from a string.
            TODO Unit tests, if I decide to keep this method.
            </summary>
            <param name="str">The string to process.</param>
            <returns>The string with HTML tags removed.</returns>
        </member>
        <member name="M:Galaxon.Core.Strings.StringExtensions.IsAscii(System.String)">
            <summary>
            Check if a string contains only ASCII characters.
            </summary>
            <param name="str">The string to check.</param>
            <returns>If the string is empty or fully ASCII.</returns>
        </member>
        <member name="M:Galaxon.Core.Strings.StringExtensions.IsPalindrome(System.String)">
            <summary>
            Check if a string is a palindrome.
            </summary>
        </member>
        <member name="F:Galaxon.Core.Strings.StringExtensions.SmallCapsChars">
            <summary>
            Map from lower-case letters to their Unicode small caps equivalents.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Strings.StringExtensions.ToSmallCaps(System.String)">
            <summary>
            Convert all lower-case letters in a string to their Unicode small caps variant.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Strings.StringExtensions.ToUpperFirstLetter(System.String)">
            <summary>
            Return the string with the first letter converted to upper-case.
            The other letters aren't changed.
            </summary>
            <param name="str">The original string.</param>
            <returns>The string with the first letter upper-cased.</returns>
        </member>
        <member name="M:Galaxon.Core.Strings.StringExtensions.ToProper(System.String)">
            <summary>
            Return the string with the first letter of each word upper-case, and all the other letters
            in each word unchanged.
            Words are taken to be sequences of letters and apostrophes (two kinds are supported), and
            are thus separated by 1 or more non-word characters.
            </summary>
            <param name="str">The original string.</param>
            <returns>The string with the first letter of each word upper-cased.</returns>
        </member>
        <member name="M:Galaxon.Core.Strings.StringExtensions.GetCase(System.String)">
            <summary>
            Get the string's case.
            If it could not be detected, defaults to Mixed.
            </summary>
            <param name="str">Source string.</param>
            <returns>The string's case.</returns>
        </member>
        <member name="M:Galaxon.Core.Strings.StringExtensions.SetCase(System.String,Galaxon.Core.Strings.EStringCase)">
            <summary>
            Generates a new string from a source string and a desired string case.
            </summary>
            <param name="str">Source string.</param>
            <param name="stringCase">The string case to convert to.</param>
            <returns>The new string.</returns>
        </member>
        <member name="M:Galaxon.Core.Strings.StringExtensions.ZeroPad(System.String,System.Int32)">
            <summary>
            Pad a string on the left with zeroes to make it up to a certain width.
            </summary>
            <param name="str">The string to pad.</param>
            <param name="width">
            The minimum number of characters in the resulting string.
            Default is 2, which is useful for times and dates.
            </param>
            <returns>The zero-padded string.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="str"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="width"/> is not positive.
            </exception>
        </member>
        <member name="M:Galaxon.Core.Strings.StringExtensions.GroupDigits(System.String,System.Char,System.Int32)">
            <summary>
            Formats a string of digits into groups using the specified group separator and size.
            </summary>
            <remarks>
            This method is designed primarily for formatting integers but can be used for other
            purposes, assuming the characters are digits. It allows formatting numbers in different
            bases like hexadecimal. However, it doesn't handle numbers with a fractional part.
            </remarks>
            <example>
            To format a decimal integer:
            <code>
            "12345678".GroupDigits() => "12,345,678"
            </code>
            You can chain methods:
            <code>
            "11111000000001010101".ZeroPad(24).GroupDigits('_', 8) => "00001111_10000000_01010101"
            123456789.ToHex().ZeroPad(8).GroupDigits(' ') => "075b cd15"
            </code>
            </example>
            <param name="str">The string of digits to format.</param>
            <param name="separator">The group separator character. Default is ','.</param>
            <param name="size">The size of each group. Default is 3.</param>
            <returns>The formatted string.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="str"/> is null.
            </exception>
        </member>
        <member name="M:Galaxon.Core.Strings.StringExtensions.ToInt(System.String)">
            <summary>
            Convert a nullable string to a nullable integer without throwing an exception.
            If the input string is null or cannot be parsed into an integer, returns null.
            </summary>
            <param name="str">The nullable string to convert to an integer.</param>
            <returns>
            A nullable integer representing the parsed value of the input string,
            or null if the input string is null or cannot be parsed.
            </returns>
        </member>
        <member name="M:Galaxon.Core.Strings.StringExtensions.ToDouble(System.String)">
            <summary>
            Convert a nullable string to a nullable double without throwing an exception.
            If the input string is null or cannot be parsed into an double, returns null.
            </summary>
            <param name="str">The nullable string to convert to an double.</param>
            <returns>
            A nullable double representing the parsed value of the input string,
            or null if the input string is null or cannot be parsed.
            </returns>
        </member>
        <member name="T:Galaxon.Core.Testing.AssertExtensions">
            <summary>
            Container for my own custom Assert methods.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Testing.AssertExtensions.AreEqual(System.ValueTuple{System.Double,System.Double,System.Double},System.ValueTuple{System.Double,System.Double,System.Double},System.ValueTuple{System.Double,System.Double,System.Double})">
            <summary>
            Helper function to compare DMS (degrees, minutes, seconds) tuples for equality.
            </summary>
            <param name="a">Angle 1</param>
            <param name="b">Angle 2</param>
            <param name="delta">Maximum acceptable difference between the two angles.</param>
        </member>
        <member name="M:Galaxon.Core.Testing.AssertExtensions.AreEqual(System.DateTime,System.DateTime,System.Nullable{System.TimeSpan})">
            <summary>
            Helper function to compare DateTimes for equality.
            </summary>
            <param name="dt1">The first DateTime</param>
            <param name="dt2">The second DateTime</param>
            <param name="delta">Maximum acceptable difference.</param>
        </member>
        <member name="M:Galaxon.Core.Testing.AssertExtensions.IsInRange(System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Check if a value is in a given range.
            </summary>
            <param name="value">The value to test.</param>
            <param name="lower">The lower value.</param>
            <param name="upper">The upper value.</param>
            <param name="includeLower">Include lower value in the range.</param>
            <param name="includeUpper">Include upper value in the range.</param>
        </member>
        <member name="M:Galaxon.Core.Testing.AssertExtensions.AreEqualPercent(System.Double,System.Double,System.Double)">
            <summary>
            Compare two double values for equality, with the delta expressed as percentage of the
            expected value rather than an absolute value.
            </summary>
        </member>
        <member name="T:Galaxon.Core.Types.EnumExtensions">
            <summary>
            Extension methods for enum types.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Types.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            Get the value of the Description attribute for the enum value, or, if not provided,
            the name of the value (same as ToString()).
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Galaxon.Core.Types.EnumExtensions.TryParse``1(System.String,``0@)">
            <summary>
            Similar to Enum.TryParse(), this method finds an enum value given a name or description.
            If no values are found with a matching name, looks for a match on description.
            Must match exactly (case-sensitive) the value name or the Description attribute.
            </summary>
            <param name="nameOrDescription">The enum value's name or description.</param>
            <param name="value">The matching enum value, or default if not found.</param>
            <typeparam name="T">The enum type.</typeparam>
            <returns>If a matching enum value was found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the type param is not an enum.
            </exception>
        </member>
        <member name="T:Galaxon.Core.Types.ReflectionExtensions">
            <summary>
            Handy reflection-related methods.
            </summary>
        </member>
        <member name="M:Galaxon.Core.Types.ReflectionExtensions.GetStaticFieldValue``1(System.Type,System.String)">
            <summary>
            Get the value of a static field.
            </summary>
            <param name="classType">The class type.</param>
            <param name="name">The name of the field.</param>
            <typeparam name="TField">The field type.</typeparam>
            <returns>The value of the static field.</returns>
            <exception cref="T:System.MissingMemberException">
            If the static field doesn't exist on the specified type.
            </exception>
        </member>
        <member name="M:Galaxon.Core.Types.ReflectionExtensions.GetStaticFieldValue``2(System.String)">
            <summary>
            Get the value of a static field.
            </summary>
            <param name="name">The name of the field.</param>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TField">The field type.</typeparam>
            <returns>The value of the static field.</returns>
            <exception cref="T:System.MissingMemberException">
            If the static field doesn't exist on the specified type.
            </exception>
        </member>
        <member name="M:Galaxon.Core.Types.ReflectionExtensions.GetStaticPropertyValue``1(System.Type,System.String)">
            <summary>
            Get the value of a static property.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="classType">The class type.</param>
            <typeparam name="TProperty">The property type.</typeparam>
            <returns>The value of the static property.</returns>
            <exception cref="T:System.MissingMemberException">
            If the static property doesn't exist on the specified type.
            </exception>
        </member>
        <member name="M:Galaxon.Core.Types.ReflectionExtensions.GetStaticPropertyValue``2(System.String)">
            <summary>
            Get the value of a static property.
            </summary>
            <param name="name">The name of the property.</param>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <returns>The value of the static property.</returns>
            <exception cref="T:System.MissingMemberException">
            If the static property doesn't exist on the specified type.
            </exception>
        </member>
        <member name="M:Galaxon.Core.Types.ReflectionExtensions.GetStaticFieldOrPropertyValue``1(System.Type,System.String)">
            <summary>
            Get the value of a static field or property.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="classType">The class type.</param>
            <typeparam name="TMember">The field or property type.</typeparam>
            <returns>The value of the static field or property.</returns>
            <exception cref="T:System.MissingMemberException">
            If the static field or property doesn't exist on the specified type.
            </exception>
        </member>
        <member name="M:Galaxon.Core.Types.ReflectionExtensions.GetStaticFieldOrPropertyValue``2(System.String)">
            <summary>
            Get the value of a static field or property.
            </summary>
            <param name="name">The name of the property.</param>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The field or property type.</typeparam>
            <returns>The value of the static field or property.</returns>
            <exception cref="T:System.MissingMemberException">
            If the static field or property doesn't exist on the specified type.
            </exception>
        </member>
        <member name="M:Galaxon.Core.Types.ReflectionExtensions.CanCast(System.Type,System.Type)">
            <summary>
            See if a cast operator exists from one type to another.
            </summary>
            <param name="sourceType">The source type.</param>
            <param name="targetType">The target type.</param>
            <returns>If a cast operator exists.</returns>
        </member>
        <member name="M:Galaxon.Core.Types.ReflectionExtensions.GetCastMethod(System.Type,System.Type)">
            <summary>
            Get the info for a method that casts one type to another.
            </summary>
            <param name="sourceType">The source type.</param>
            <param name="targetType">The target type.</param>
            <returns>The method info.</returns>
        </member>
        <member name="M:Galaxon.Core.Types.ReflectionExtensions.CanCast``2">
            <summary>
            See if a cast operator exists from one type to another.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <returns>If a cast operator exists.</returns>
        </member>
        <member name="M:Galaxon.Core.Types.ReflectionExtensions.Cast``2(``0)">
            <summary>
            Case a value from a source type to a target type.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="src">The source value.</param>
            <returns>The target value.</returns>
            <exception cref="T:System.InvalidCastException">If the cast failed.</exception>
        </member>
        <member name="M:Galaxon.Core.Types.ReflectionExtensions.ImplementsInterface(System.Type,System.Type)">
            <summary>
            Check if a type implements an interface.
            </summary>
            <param name="type">The type.</param>
            <param name="interfaceType">The interface type.</param>
            <returns>True if the specified type implements the specified interface.</returns>
        </member>
        <member name="M:Galaxon.Core.Types.ReflectionExtensions.ImplementsInterface``2">
            <summary>
            Check if a type implements an interface.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <typeparam name="TInterface">The interface type.</typeparam>
            <returns>True if the specified type implements the specified interface.</returns>
        </member>
        <member name="M:Galaxon.Core.Types.ReflectionExtensions.ImplementsGenericInterface(System.Type,System.Type)">
            <summary>
            Check if a type implements a generic interface.
            </summary>
            <param name="type">The type.</param>
            <param name="interfaceType">The generic interface type.</param>
            <returns>True if the specified type implements the specified interface.</returns>
        </member>
        <member name="M:Galaxon.Core.Types.ReflectionExtensions.ImplementsGenericInterface``2">
            <summary>
            Check if a type implements an generic interface.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <typeparam name="TInterface">The generic interface type.</typeparam>
            <returns>True if the specified type implements the specified interface.</returns>
        </member>
        <member name="M:Galaxon.Core.Types.ReflectionExtensions.ImplementsSelfReferencingGenericInterface(System.Type,System.Type)">
            <summary>
            Check if a type implements a self-referencing generic interface
            (e.g. IBinaryInteger{TSelf}).
            Only works if the self-referenced type is the first type parameter.
            </summary>
            <param name="type">The type.</param>
            <param name="interfaceType">The self-referencing generic interface.</param>
            <returns>True if the specified type implements the specified interface.</returns>
        </member>
        <member name="M:Galaxon.Core.Types.ReflectionExtensions.ImplementsSelfReferencingGenericInterface``2">
            <summary>
            Check if a type implements an self-referencing generic interface.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <typeparam name="TInterface">The self-referencing generic interface type.</typeparam>
            <returns>True if the specified type implements the specified interface.</returns>
        </member>
    </members>
</doc>
