using System.Diagnostics;
using System.Reflection;

namespace Galaxon.BigNumbers.Tests;

/// <summary>
/// Methods and stuff for calling Python scripts.
/// </summary>
public static class PythonRunner
{
    /// <summary>Absolute path to the directory where the scripts are located.</summary>
    public static string PathToScripts
    {
        get
        {
            // Get the full path of the executing assembly.
            var executingAssemblyPath = Assembly.GetExecutingAssembly().Location;

            // Get the directory of the executing assembly.
            var assemblyDirectory = Path.GetDirectoryName(executingAssemblyPath);
            if (assemblyDirectory == null)
            {
                throw new InvalidOperationException("Could not get the assembly directory.");
            }

            // Construct the relative path.
            var relativePath = Path.Combine(assemblyDirectory, "..", "..", "..", "..",
                "BigNumbers.Tests", "Python");

            // Get the absolute path and normalize it.
            var absolutePath = Path.GetFullPath(relativePath);

            return absolutePath;
        }
    }

    /// <summary>
    /// Run a Python script.
    /// It must be located in the Python directory within the test project.
    /// </summary>
    /// <param name="scriptFileName">The filename of the script to run.</param>
    /// <param name="args">The arguments to pass to the script.</param>
    /// <returns></returns>
    /// <exception cref="InvalidOperationException"></exception>
    public static (string output, string error) RunPythonScript(string scriptFileName,
        params object[] args)
    {
        // Construct the command line arguments as a string.
        List<object> argsList = new () { $"{PathToScripts}/{scriptFileName}" };
        argsList.AddRange(args);
        var quotedArgs = argsList.Select(s => $"\"{s}\"");
        var argsString = string.Join(" ", quotedArgs);

        // Construct the process to call the Python interpreter.
        var start = new ProcessStartInfo
        {
            FileName = "python3",
            Arguments = argsString,

            // Do not use OS shell.
            UseShellExecute = false,

            // We don't need a new window.
            CreateNoWindow = true,

            // Any output generated by application will be redirected back.
            RedirectStandardOutput = true,

            // Any error in standard output will be redirected back (for example exceptions).
            RedirectStandardError = true
        };

        // Try to start the process.
        using var process = Process.Start(start);
        if (process == null)
        {
            throw new InvalidOperationException("Could not start Python process.");
        }

        // Get the output and error (if any).
        string output, error;
        using (var reader = process.StandardOutput)
        {
            output = reader.ReadToEnd();
        }
        using (var reader = process.StandardError)
        {
            error = reader.ReadToEnd();
        }
        return (output, error);
    }

    /// <summary>Call a unary Python mpmath function.</summary>
    /// <param name="functionName">The function to call. e.g. "exp", "sin", etc.</param>
    /// <param name="x">The argument.</param>
    /// <param name="precision">The number of decimal places.</param>
    /// <returns>The result, converted to a BigDecimal.</returns>
    /// <exception cref="InvalidOperationException">If something goes wrong.</exception>
    public static BigDecimal CallUnaryMathFunction(string functionName, BigDecimal x,
        int precision = 50)
    {
        var (output, error) =
            RunPythonScript("call_unary_math_function.py", functionName, x, precision);

        if (!string.IsNullOrEmpty(error))
        {
            throw new InvalidOperationException($"Error running Python script: {error}");
        }

        return BigDecimal.Parse(output);
    }

    /// <summary>Call a binary Python mpmath function.</summary>
    /// <param name="functionName">The function to call. e.g. "exp", "sin", etc.</param>
    /// <param name="x">The first argument.</param>
    /// <param name="y">The second argument.</param>
    /// <param name="precision">The number of decimal places.</param>
    /// <returns>The result, converted to a BigDecimal.</returns>
    /// <exception cref="InvalidOperationException">If something goes wrong.</exception>
    public static BigDecimal CallBinaryMathFunction(string functionName, BigDecimal x, BigDecimal y,
        int precision = 50)
    {
        var (output, error) =
            RunPythonScript("call_binary_math_function.py", functionName, x, y, precision);

        if (!string.IsNullOrEmpty(error))
        {
            throw new InvalidOperationException($"Error running Python script: {error}");
        }

        return BigDecimal.Parse(output);
    }
}
